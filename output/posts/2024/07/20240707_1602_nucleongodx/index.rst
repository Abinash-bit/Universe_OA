.. title: Midterm Evaluations Are Close!
.. slug:
.. date: 2024-07-07 16:02:57 
.. tags: SunPy
.. author: Manit Singh
.. link: https://medium.com/@manitsingh018/midterm-evaluations-are-close-459d99d953ff?source=rss-472b9ac5a505------2
.. description:
.. category: gsoc2024


.. raw:: html

    <p>So, in the past two weeks, upon discussion with my mentors, I started working on the stretch goal, which involves using Astroquery’s TAP Plus for making the URL calls. Additionally, I had to clean up some code and remove the instruments SPICE and PHI from returning wavelength data due to their individual issues.</p>
    <p>For SPICE, the `wavemin’ and `wavemax` values are only available for the first spectral window in SOAR, so the data is not entirely representative of what a user might be searching for. Similarly, for PHI, the issue is that two different units are used to represent wavelength, which results in very<br />different `wavemin’ and `wavemax` data due to the data being in both angstrom and nanometer units. Unfortunately, this is not specified anywhere in SOAR, so to ensure that `sunpy-soar` does not<br />return any misleading data to the user, we’ve decided to exclude the wavelength data for these instruments.</p>
    <p>Coming to the change in table fetching methods. TAP Plus basically uses SQL to fetch tables, which is different from the normal TAP that uses ADQL to fetch tables. This avoids the entire process of manually constructing Astropy tables after calling the SOAR API with TAP.</p>
    <!-- TEASER_END -->
    <p>For comparison, this is how the method looks with TAP:</p>
    <pre>@staticmethod<br />    def _do_search(query):<br />        &quot;&quot;&quot;<br />        Query the SOAR server with a single query.<br /><br />        Parameters<br />        ----------<br />        query : list[str]<br />            List of query items.<br /><br />        Returns<br />        -------<br />        astropy.table.QTable<br />            Query results.<br />        &quot;&quot;&quot;<br />        tap_endpoint = &quot;http://soar.esac.esa.int/soar-sl-tap/tap&quot;<br />        payload = SOARClient._construct_payload(query)<br />        # Need to force requests to not form-encode the parameters<br />        payload = &quot;&amp;&quot;.join([f&quot;{key}={val}&quot; for key, val in payload.items()])<br />        # Get request info<br />        r = requests.get(f&quot;{tap_endpoint}/sync&quot;, params=payload)<br />        log.debug(f&quot;Sent query: {r.url}&quot;)<br />        r.raise_for_status()<br /><br />        # Do some list/dict wrangling<br />        names = [m[&quot;name&quot;] for m in r.json()[&quot;metadata&quot;]]<br />        info = {name: [] for name in names}<br /><br />        for entry in r.json()[&quot;data&quot;]:<br />            for i, name in enumerate(names):<br />                info[name].append(entry[i])<br /><br />        if len(info[&quot;begin_time&quot;]):<br />            info[&quot;begin_time&quot;] = parse_time(info[&quot;begin_time&quot;]).iso<br />            info[&quot;end_time&quot;] = parse_time(info[&quot;end_time&quot;]).iso<br /><br />        result_table = astropy.table.QTable(<br />            {<br />                &quot;Instrument&quot;: info[&quot;instrument&quot;],<br />                &quot;Data product&quot;: info[&quot;descriptor&quot;],<br />                &quot;Level&quot;: info[&quot;level&quot;],<br />                &quot;Start time&quot;: info[&quot;begin_time&quot;],<br />                &quot;End time&quot;: info[&quot;end_time&quot;],<br />                &quot;Data item ID&quot;: info[&quot;data_item_id&quot;],<br />                &quot;Filename&quot;: info[&quot;filename&quot;],<br />                &quot;Filesize&quot;: info[&quot;filesize&quot;],<br />                &quot;SOOP Name&quot;: info[&quot;soop_name&quot;],<br />            },<br />        )<br />        if &quot;detector&quot; in info:<br />            result_table[&quot;Detector&quot;] = info[&quot;detector&quot;]<br />        if &quot;wavelength&quot; in info:<br />            result_table[&quot;Wavelength&quot;] = info[&quot;wavelength&quot;]<br />        result_table.sort(&quot;Start time&quot;)<br />        return result_table</pre><p>This is how the method looks with Astroquery TAP plus.</p>
    <pre>`def _do_search(query):<br />        &quot;&quot;&quot;<br />        Query the SOAR server with a single query.<br /><br />        Parameters<br />        ----------<br />        query : list[str]<br />            List of query items.<br /><br />        Returns<br />        -------<br />        astropy.table.Table<br />            Query results.<br />        &quot;&quot;&quot;<br />        tap_endpoint = &quot;http://soar.esac.esa.int/soar-sl-tap/tap&quot;<br />        sql_query = SOARClient._construct_payload(query)<br />        soar = TapPlus(url=tap_endpoint)<br />        job = soar.launch_job_async(sql_query)<br />        results = job.results<br />        new_colnames = {<br />            &quot;instrument&quot;: &quot;Instrument&quot;,<br />            &quot;descriptor&quot;: &quot;Data product&quot;,<br />            &quot;level&quot;: &quot;Level&quot;,<br />            &quot;begin_time&quot;: &quot;Start time&quot;,<br />            &quot;end_time&quot;: &quot;End time&quot;,<br />            &quot;filename&quot;: &quot;Filename&quot;,<br />            &quot;filesize&quot;: &quot;Filesize&quot;,<br />            &quot;soop_name&quot;: &quot;SOOP Name&quot;,<br />        }<br />        new_colnames.update({k: k.capitalize() for k in [&quot;wavelength&quot;, &quot;detector&quot;] if k in results.colnames})<br />        for old_name, new_name in new_colnames.items():<br />            results.rename_column(old_name, new_name)<br />        results.sort(&quot;Start time&quot;)<br />        return results</pre><p>Even the query construction methods, they looks a lot more cleaner. As the final query generated is an SQL query not an ADQL query.</p>
    <img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=459d99d953ff" width="1" />

