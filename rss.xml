<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy</title><link>http://openastronomy.org/Universe_OA/</link><description>This is an aggregator of openastronomy people</description><atom:link href="http://openastronomy.org/Universe_OA/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 12 Jun 2023 01:16:12 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>GSoC Week 1 Progress Update</title><link>http://openastronomy.org/Universe_OA/posts/2023/06/20230608_0729_pupperemeritus/</link><dc:creator>pupper emeritus</dc:creator><description>&lt;h2&gt;


&lt;!-- TEASER_END --&gt;
Brief
&lt;/h2&gt;

&lt;p&gt;Week 1 has been quite eventful with me creating a Lomb Scargle Fourier Transform function and get a working class for Lomb Scargle Cross Spectrum and Power Spectrum.&lt;/p&gt;

&lt;p&gt;I inherited my LS cross spectrum from the regular cross spectrum class. Had to rewrite the &lt;code&gt;constructor&lt;/code&gt;, &lt;code&gt;initial_checks&lt;/code&gt; , &lt;code&gt;make_crossspectrum&lt;/code&gt;, &lt;code&gt;_make_auxil_pds&lt;/code&gt; and &lt;code&gt;_initialize_empty&lt;/code&gt;. And also wrote a new &lt;code&gt;_ls_cross&lt;/code&gt; method which just returns the frequencies and cross spectra for given light curves and it is an internal function only to be used by the class.&lt;/p&gt;

&lt;p&gt;The original slow implementation has been completed. I am still working on the fast version.&lt;/p&gt;

&lt;p&gt;As this is not a project that can be completed in a bunch of small PRs, I will push to a single PR which will be merged after completion of the project. The following draft PR is the one to which I will be pushing to. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/StingraySoftware/stingray/pull/737/"&gt;https://github.com/StingraySoftware/stingray/pull/737/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;


Details
&lt;/h2&gt;

&lt;p&gt;The following are the APIs for the classes&lt;/p&gt;

&lt;h3&gt;


Cross Spectrum
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Make a cross spectrum from an unevenly sampled light curve.
You can also make an empty :class:`Crossspectrum` object to populate with your
own Fourier-transformed data (this can sometimes be useful when making
binned power spectra).

Parameters
----------
data1: :class:`stingray.Lightcurve` or :class:`stingray.events.EventList`, optional, default ``None``
The dataset for the first channel/band of interest.

data2: :class:`stingray.Lightcurve` or :class:`stingray.events.EventList`, optional, default ``None``
The dataset for the second, or "reference", band.

norm: {``frac``, ``abs``, ``leahy``, ``none``}, default ``none``
The normalization of the (real part of the) cross spectrum.

power_type: string, optional, default ``real``
Parameter to choose among complete, real part and magnitude of the cross spectrum.

fullspec: boolean, optional, default ``False``
If False, keep only the positive frequencies, or if True, keep all of them .

Other Parameters
----------------
dt: float
The time resolution of the light curve. Only needed when constructing
light curves in the case where ``data1``, ``data2`` are
:class:`EventList` objects

skip_checks: bool
Skip initial checks, for speed or other reasons (you need to trust your
inputs!)

min_freq : float
Minimum frequency to take the Lomb-Scargle Fourier Transform

max_freq: float
Maximum frequency to take the Lomb-Scargle Fourier Transform

df : float
The time resolution of the light curve. Only needed where ``data1``, ``data2`` are

method : str
The method to be used by the Lomb-Scargle Fourier Transformation function. `fast`
and `slow` are the alloowed values. Default is `fast`. fast uses the optimized Press
and Rybicki O(n*log(n))

Attributes
----------
freq: numpy.ndarray
The array of mid-bin frequencies that the Fourier transform samples

power: numpy.ndarray
The array of cross spectra (complex numbers)

power_err: numpy.ndarray
The uncertainties of ``power``.
An approximation for each bin given by ``power_err= power/sqrt(m)``.
Where ``m`` is the number of power averaged in each bin (by frequency
binning, or averaging more than one spectra). Note that for a single
realization (``m=1``) the error is equal to the power.

df: float
The frequency resolution

m: int
The number of averaged cross-spectra amplitudes in each bin.

n: int
The number of data points/time bins in one segment of the light
curves.

k: array of int
The rebinning scheme if the object has been rebinned otherwise is set to 1.

nphots1: float
The total number of photons in light curve 1

nphots2: float
The total number of photons in light curve 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;


Power Spectrum
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Make a :class:`LombScarglePowerspectrum` (also called periodogram) from a unevenly sampled (binned)
light curve. Periodograms can be normalized by either Leahy normalization,
fractional rms normalization, absolute rms normalization, or not at all.

You can also make an empty :class:`LombScarglePowerspectrum` object to populate with
your own fourier-transformed data (this can sometimes be useful when making
binned power spectra).

Parameters
----------
data: :class:`stingray.lightcurve.Lightcurve` or :class:`stingray.events.EventList` object, optional, default ``None``
The light curve data to be Fourier-transformed.

norm: {"leahy" | "frac" | "abs" | "none" }, optional, default "frac"
The normaliation of the power spectrum to be used. Options are
"leahy", "frac", "abs" and "none", default is "frac".

Other Parameters
----------------
dt: float
The time resolution of the light curve. Only needed when constructing
light curves in the case where ``data`` is a
:class:`EventList` object

skip_checks: bool
Skip initial checks, for speed or other reasons (you need to trust your
inputs!).

min_freq : float
Minimum frequency to take the Lomb-Scargle Fourier Transform

max_freq: float
Maximum frequency to take the Lomb-Scargle Fourier Transform

df : float
The time resolution of the light curve. Only needed where ``data`` is a :class`stingray.Eventlist` object

method : str
The method to be used by the Lomb-Scargle Fourier Transformation function. `fast`
and `slow` are the alloowed values. Default is `fast`. fast uses the optimized Press
and Rybicki O(n*log(n))

Attributes
----------
norm: {"leahy" | "frac" | "abs" | "none" }
The normalization of the power spectrum.

freq: numpy.ndarray
The array of mid-bin frequencies that the Fourier transform samples.

power: numpy.ndarray
The array of normalized squared absolute values of Fourier
amplitudes.

power_err: numpy.ndarray
The uncertainties of ``power``.
An approximation for each bin given by ``power_err= power/sqrt(m)``.
Where ``m`` is the number of power averaged in each bin (by frequency
binning, or averaging power spectra of segments of a light curve).
Note that for a single realization (``m=1``) the error is equal to the
power.

df: float
The frequency resolution.

m: int
The number of averaged powers in each bin.

n: int
The number of data points in the light curve.

nphots: float
The total number of photons in the light curve.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2023/06/20230608_0729_pupperemeritus/</guid><pubDate>Thu, 08 Jun 2023 06:29:01 GMT</pubDate></item><item><title>GSOC Week 1 : A global overview of the RADIS API.</title><link>http://openastronomy.org/Universe_OA/posts/2023/06/20230604_2227_menasrac/</link><dc:creator>Racim MENASRIA</dc:creator><description>&lt;h4&gt;GSOC Week 1 : A global overview of the RADIS API.&lt;/h4&gt;&lt;p&gt;Since the point of my project is to implement new databases in the RADIS API and to reform it in other to make it common and stand alone, it seems important to understand how this API works.&lt;/p&gt;
&lt;p&gt;Thus, I have started my 12 weeks projects by reading carefully the API documentation available at &lt;a href="https://radis.readthedocs.io/en/latest/source/radis.io.dbmanager.html"&gt;https://radis.readthedocs.io/en/latest/source/radis.io.dbmanager.html&lt;/a&gt;. I will detail in this article what I consider the key points to understand how Radis works globally and aim to answer the following question : Whats are the steps to proceed in order to include a new database as Kurucz to RADIS ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This page is a description of the different modules available in the RADIS library except the api one which will be discussed later.&lt;/strong&gt;&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1017/1*UPlH0eBh97WoVpiEn_C7rQ.png"&gt;&lt;/figure&gt;&lt;p&gt;In particular, the radis.io package provided functionality for file management, downloading and analysis of different spectroscopic databases.&lt;/p&gt;
&lt;p&gt;To understand in detail how the RADIS API works and integrate a new database like Kurucz, here are the most important radis.io package sub-modules to explore :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dbmanager&lt;/strong&gt; : This submodule used to contain the DatabaseManager class, which is the heart of database management in RADIS before it was moved to the api module. Understanding how this class is used to save, download, manipulate and interact with existing databases is essential. I will also need to understand how to add a new database by implementing the appropriate methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;geisa, hitran or exomol : &lt;/strong&gt;I have to study how GEISA, HITRAN or Exomol files are downloaded, saved and processed. Understanding how this databases are integrated will give me an idea of the structure and workflow needed to integrate a new database.&lt;/p&gt;
&lt;h4&gt;The DatabaseManager class&lt;/h4&gt;&lt;p&gt;The DatabaseManager class aims to handle and manage files from various databases. It provides a generic framework for managing and caching files from different sources or databases.&lt;/p&gt;
&lt;pre&gt;class DatabaseManager(object):&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;add_column(df, key, value)&lt;/strong&gt;: This method allows to create a column with a key and a value specified in a DataFrame or a dictionary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;check_deprecated_files(local_files, auto_remove=True)&lt;/strong&gt;: This method checks file metadata and removes deprecated ones. If auto_remove is set to True, deprecated files will be automatically removed. Otherwise, an error will be thrown.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;clean_download_files()&lt;/strong&gt;: This method cleans downloaded and unzipped files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;download_and_parse(urlnames, local_files)&lt;/strong&gt;: This method downloads and parses files from the specified URLs and saves them locally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fetch_filenames()&lt;/strong&gt;: This method fetches the names of all files from the database, even if they haven’t been downloaded yet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fetch_urlnames()&lt;/strong&gt;: This method must be overridden in the DatabaseManager subclass. It should return a list of URLs corresponding to database files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;get_columns(local_file)&lt;/strong&gt;: This method retrieves all the columns available in a database file using the get_columns function of the DataFileManager class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;load(local_files, columns=None, lower_bound=[], upper_bound=[], within=[], output=’pandas’):&lt;/strong&gt; This method loads data from database files. You can specify which columns to load, lower and upper bounds for values in certain columns, and constraints for certain columns. You can also specify the output format, such as ‘pandas’, ‘vaex’ or ‘jax’.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;plot(local_files, isotope, wavenum_min, wavenum_max):&lt;/strong&gt; This method is a convenience function for plotting the linestrengths of the database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;register(dict_entries):&lt;/strong&gt; This method registers dictionary entries for a specified database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;remove_local_files(local_files)&lt;/strong&gt;: This method removes the specified local files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rename_columns(df, rename_dict):&lt;/strong&gt; This method renames the columns of a DataFrame using a dictionary of correspondence between the old column names and the new names.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;register_database(databank_name, dict_entries, verbose): &lt;/strong&gt;This method adds registered databases to the RADIS configuration file.&lt;/p&gt;
&lt;h4&gt;The radis.io.geisa module review : to get some ideas ?&lt;/h4&gt;&lt;p&gt;The GEISADatabaseManager class is a subclass of DatabaseManager which is specifically designed to manage GEISA databases. It adds specific functionalities to the management of GEISA files and their integration into the RADIS API. It gives us an insight of what the implemenation of other databases as Kurucz should look like. However, every database has its own specificities that is why the methods may differ on some aspects though they are built on a same basis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fetch_urlnames(): &lt;/strong&gt;This method must be implemented to return a list of URLs corresponding to GEISA files in your database. These URLs will be used to download files from the GEISA website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;parse_to_local_file():&lt;/strong&gt; This method is used to unpack GEISA files and save them locally. It also adds metadata to files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;register():&lt;/strong&gt; This method registers the GEISA database in the RADIS configuration file. It ensures that the RADIS API recognizes and can access the database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fetch_geisa():&lt;/strong&gt; This GEISA specific method fetches GEISA files from the GEISA website, unpacks them and creates an HDF5 file containing all row data. It returns a Pandas DataFrame containing all rows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;columns_GEISA:&lt;/strong&gt; It is a dictionary that defines the parsing order of columns in the GEISA2020 format. It specifies column names, data types, descriptions, and units.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;engine:&lt;/strong&gt; This is an optional parameter that allows to specify the memory mapping library to use for the GEISA database. By default, it uses the ‘default’ value specified in the RADIS configuration file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;verbose, chunksize, parallel:&lt;/strong&gt; These are optional parameters to control the verbosity level of informational messages, the size of chunks for loading data and the use of parallel loading.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The fetch_geisa() &lt;/strong&gt;method is an example of using the GEISADatabaseManager class to retrieve GEISA data for a specific molecule. This method downloads GEISA files from the GEISA website, unpacks them and saves them locally. It returns a Pandas DataFrame containing all rows from the GEISA database for the specified molecule.&lt;/p&gt;
&lt;p&gt;Before exploring the Kurucz database structure more in details, let is discuss the other modules of the RADIS API.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;The db module :&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Definition of molecules:&lt;/strong&gt; The db module allows to define the molecules used in the spectroscopic calculations. You can specify isotopes, molecular weights, chemical symbols, and other relevant molecular properties.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spectroscopic constants: &lt;/strong&gt;The db module stores the spectroscopic constants associated with each molecule, such as electronic transitions, energy levels, frequencies, absorption intensities, cross sections, etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data Access&lt;/strong&gt;: The db module provides methods and data structures to easily access information about molecules and spectroscopic constants.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Database extensions:&lt;/strong&gt; The db module allows extending the functionalities of the database by adding new molecules, isotopes or spectroscopic constants. Here it is possible to add new data or integrate external databases to enrich the capabilities of RADIS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interoperability:&lt;/strong&gt; The db module facilitates interoperability with other libraries and spectroscopic data formats. It allows to import and export spectroscopic data in different formats, such as HITRAN, HITEMP, GEISA, Kurucz, etc.&lt;/p&gt;
&lt;h4&gt;What about Exojax ?&lt;/h4&gt;&lt;p&gt;Another open-source code, called EXOJAX, exchanged portions of code with RADIS until some parts of both codes became very similar. Currently, a database API is written in the RADIS code.&lt;/p&gt;
&lt;p&gt;Understanding how Radis and Exojax somehow partially merged will be useful to understand how to implement a new database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;May 2022 &lt;/strong&gt;: an example of an Exojax-like syntax was added in the exomol.py file. This example introduces a new class called mdbExomol, which holds Jax arrays as attributes. This class is based on DataFrame loading and is designed to be a drop-in replacement for Exojax computations.&lt;/p&gt;
&lt;pre&gt;mport pathlib&lt;br&gt;&lt;br&gt;import numpy as np&lt;br&gt;&lt;br&gt;from radis.api.exomolapi import (&lt;br&gt;    MdbExomol,&lt;br&gt;    get_exomol_database_list,&lt;br&gt;    get_exomol_full_isotope_name,&lt;br&gt;)&lt;br&gt;from radis.db.classes import get_molecule_identifier&lt;br&gt;&lt;br&gt;&lt;br&gt;def fetch_exomol(&lt;br&gt;    molecule,&lt;br&gt;    database=None,&lt;br&gt;    local_databases=None,&lt;br&gt;    databank_name="EXOMOL-{molecule}",&lt;br&gt;    isotope="1",&lt;br&gt;    load_wavenum_min=None,&lt;br&gt;    load_wavenum_max=None,&lt;br&gt;    columns=None,&lt;br&gt;    cache=True,&lt;br&gt;    verbose=True,&lt;br&gt;    clean_cache_files=True,&lt;br&gt;    return_local_path=False,&lt;br&gt;    return_partition_function=False,&lt;br&gt;    engine="default",&lt;br&gt;    output="pandas",&lt;br&gt;    skip_optional_data=True,&lt;br&gt;):&lt;/pre&gt;&lt;p&gt;Here is a description of each function parameter:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;molecule&lt;/strong&gt;: The name of the molecule for which we want to retrieve data.&lt;br&gt;database: The name of the specific ExoMol database to use. If the value is None or “default”, the recommended database will be used.&lt;br&gt;local_databases: The path to the local directory where the ExoMol database files will be stored.&lt;br&gt;&lt;strong&gt;databank_name:&lt;/strong&gt; The name to give to the ExoMol database.&lt;br&gt;isotope: The number of the specific isotope of the molecule for which you want to retrieve data.&lt;br&gt;&lt;strong&gt;load_wavenum_min and load_wavenum_max:&lt;/strong&gt; The minimum and maximum wavenumbers to load.&lt;br&gt;&lt;strong&gt;columns: &lt;/strong&gt;A list of specific columns to load from ExoMol files.&lt;br&gt;&lt;strong&gt;cache:&lt;/strong&gt; A boolean indicating whether files should be cached for later use.&lt;br&gt;&lt;strong&gt;verbose:&lt;/strong&gt; A boolean indicating whether informational messages should be displayed during the process.&lt;br&gt;&lt;strong&gt;clean_cache_files:&lt;/strong&gt; A boolean indicating whether cached files should be removed after use.&lt;br&gt;&lt;strong&gt;return_local_path and return_partition_function:&lt;/strong&gt; Booleans indicate whether local path to files and partition function should be returned in addition to data.&lt;/p&gt;
&lt;p&gt;The function starts by checking the settings and determining which ExoMol database to use. Next, it creates an MdbExomol object to manage the ExoMol database, downloading files as needed. The local files are then loaded into a DataFrame, with specific columns if needed. RADIS-specific manipulations are performed on the DataFrame, such as renaming columns and adding additional data. Eventually the DataFrame is returned, possibly with other information if selected.&lt;/p&gt;
&lt;p&gt;Then &lt;a href="https://medium.com/u/1169335fca8"&gt;Erwan Pannier&lt;/a&gt; added an Example of an Exojax-like syntax, creating a ``mdbExoMol` class holding jax arrays as Attributes (based on DataFrame loading), so it can be used as a drop-in replacement&lt;/p&gt;
&lt;p&gt;The example also shows how to : Compute an Exomol CH4 spectrum with Radis Load Exomol CH4 Jax arrays ready for an Exojax computation, by downloading the files to the .database local folder Load Exomol CH4 Jax arrays ready for an Exojax computation, by loading the files from the Radis’s database of (1) For 2. and 3., a local_databases= parameter allows to easily switch in between any local folder (to save on download &amp;amp; caching times if comparing the two codes)&lt;/p&gt;
&lt;p&gt;Here is the code ( available on &lt;a href="https://github.com/radis/radis/blob/e317c994451d3afa02b1fa63d90ae0eb546f36ed/radis/io/exomol.py#L925"&gt;radis/exomol.py at e317c994451d3afa02b1fa63d90ae0eb546f36ed · radis/radis (github.com)&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;   #%% RADIS-like Example&lt;br&gt;    # uses fetch_exomol() internally&lt;br&gt;&lt;br&gt;    from radis import calc_spectrum&lt;br&gt;&lt;br&gt;    s = calc_spectrum(&lt;br&gt;        wavelength_min=1.630e4,&lt;br&gt;        wavelength_max=1.6305e4,&lt;br&gt;        molecule="CH4",&lt;br&gt;        isotope="1",&lt;br&gt;        pressure=1.01325,  # bar&lt;br&gt;        Tgas=1000,  # K&lt;br&gt;        mole_fraction=0.1,&lt;br&gt;        path_length=1,  # cm&lt;br&gt;        # broadening_method="fft",  # @ dev: Doesn't work with 'voigt'&lt;br&gt;        databank=(&lt;br&gt;            "exomol",&lt;br&gt;            "YT10to10",&lt;br&gt;        ),  # Simply use 'exomol' for the recommended database&lt;br&gt;    )&lt;br&gt;    # s.apply_slit(1, "cm-1")  # simulate an experimental slit&lt;br&gt;    s.plot("xsection")&lt;br&gt;&lt;br&gt;    # %% Exojax like Example&lt;br&gt;&lt;br&gt;    class mdbExoMol:&lt;br&gt;&lt;br&gt;        # hardcode attribute names, to prevent typos and the declaration of unwanted parameters&lt;br&gt;        __slots__ = [&lt;br&gt;            "Sij0",&lt;br&gt;            "logsij0",&lt;br&gt;            "nu_lines",&lt;br&gt;            "A",&lt;br&gt;            "elower",&lt;br&gt;            "eupper",&lt;br&gt;            "gupper",&lt;br&gt;            "jlower",&lt;br&gt;            "jupper",&lt;br&gt;        ]&lt;br&gt;&lt;br&gt;        def __init__(&lt;br&gt;            self,&lt;br&gt;            molecule,&lt;br&gt;            path,&lt;br&gt;            nurange=[-np.inf, np.inf],&lt;br&gt;            crit=-np.inf,&lt;br&gt;            local_databases="~/exojax",&lt;br&gt;        ):&lt;br&gt;            """&lt;br&gt;            Parameters&lt;br&gt;            ----------&lt;br&gt;            molecule: molecule name&lt;br&gt;            path : local path, mirror of ExoMol path&lt;br&gt;            nurange : TYPE, optional&lt;br&gt;                DESCRIPTION. The default is [-np.inf, np.inf].&lt;br&gt;            crit : TYPE, optional&lt;br&gt;                DESCRIPTION. The default is -np.inf.&lt;br&gt;&lt;br&gt;            Returns&lt;br&gt;            -------&lt;br&gt;            DataFrame&lt;br&gt;&lt;br&gt;            Examples&lt;br&gt;            --------&lt;br&gt;            ::&lt;br&gt;&lt;br&gt;                mdbCH4 = mdbExoMol("CH4", '.database/CH4/12C-1H4/YT10to10/', nus, crit=1.e-30)&lt;br&gt;                print(len(mdbCH4.nu_lines), "lines")&lt;br&gt;                mdbCH4.elower&lt;br&gt;&lt;br&gt;            Available columns::&lt;br&gt;&lt;br&gt;                [&lt;br&gt;                    "Sij0",&lt;br&gt;                    "logsij0",&lt;br&gt;                    "nu_lines",&lt;br&gt;                    "A",&lt;br&gt;                    "elower",&lt;br&gt;                    "eupper",&lt;br&gt;                    "gupper",&lt;br&gt;                    "jlower",&lt;br&gt;                    "jupper",&lt;br&gt;                ]&lt;br&gt;&lt;br&gt;            """&lt;br&gt;&lt;br&gt;            wavenum_min, wavenum_max = np.min(nurange), np.max(nurange)&lt;br&gt;            if wavenum_min == -np.inf:&lt;br&gt;                wavenum_min = None&lt;br&gt;            if wavenum_max == np.inf:&lt;br&gt;                wavenum_max = None&lt;br&gt;&lt;br&gt;            # Set-up database, download files and set-up cache files if needed&lt;br&gt;            mdb = MdbExomol(&lt;br&gt;                path,&lt;br&gt;                molecule=molecule,&lt;br&gt;                local_databases=local_databases,&lt;br&gt;                nurange=[wavenum_min, wavenum_max],&lt;br&gt;            )&lt;br&gt;&lt;br&gt;            # Get cache files to load :&lt;br&gt;            mgr = mdb.get_dframe_manager()&lt;br&gt;            local_files = [mgr.cache_file(f) for f in mdb.trans_file]&lt;br&gt;&lt;br&gt;            # Load them:&lt;br&gt;            jdict = mdb.load(&lt;br&gt;                local_files,&lt;br&gt;                columns=[k for k in self.__slots__ if k not in ["logsij0"]],&lt;br&gt;                lower_bound=([("nu_lines", wavenum_min)] if wavenum_min else [])&lt;br&gt;                + ([("Sij0", mdb.crit)] if not np.isneginf(mdb.crit) else []),&lt;br&gt;                upper_bound=([("nu_lines", wavenum_max)] if wavenum_max else []),&lt;br&gt;                output="jax",&lt;br&gt;            )&lt;br&gt;&lt;br&gt;            # set attributes, accessible as e.g:  mdb.nu_lines&lt;br&gt;            for k in jdict.keys():&lt;br&gt;                setattr(self, k, jdict[k])&lt;br&gt;&lt;br&gt;    nus = np.linspace(1e7 / 1.630e4, 1e7 / 1.6305e4)&lt;br&gt;&lt;br&gt;    # Download new ExoMol repo (in ~/exomol)&lt;br&gt;    mdbCH4 = mdbExoMol(&lt;br&gt;        "CH4",&lt;br&gt;        ".database/CH4/12C-1H4/YT10to10/",&lt;br&gt;        nus,&lt;br&gt;        crit=1.0e-30,&lt;br&gt;        local_databases=".",  # use local folder&lt;br&gt;    )&lt;br&gt;&lt;br&gt;    print(len(mdbCH4.nu_lines), "lines")&lt;br&gt;    mdbCH4.elower&lt;br&gt;&lt;br&gt;    # Or use RADIS's folder  (# by default ~/.radisdb/exomol)&lt;br&gt;    import radis&lt;br&gt;&lt;br&gt;    mdbCH4_2 = mdbExoMol(&lt;br&gt;        "CH4",&lt;br&gt;        "CH4/12C-1H4/YT10to10/",&lt;br&gt;        nus,&lt;br&gt;        crit=1.0e-30,&lt;br&gt;        local_databases=pathlib.Path(radis.config["DEFAULT_DOWNLOAD_PATH"]) / "exomol",&lt;br&gt;    )&lt;br&gt;    # ... ready to run Jax calculations&lt;/pre&gt;&lt;p&gt;The example added in the exomol.py file of RADIS demonstrates how to create an “mdbExoMol” class similar to Exojax, which uses jax arrays as attributes. This class allows loading ExoMol data as jax arrays, making them compatible with Exojax.&lt;/p&gt;
&lt;p&gt;The example illustrates how to calculate a CH4 spectrum using RADIS by utilizing the “mdbExoMol” class. It also shows how to load the jax arrays ready for use in an Exojax computation by downloading the files into a local “.database” folder. Additionally, the example demonstrates how to load the jax arrays from the RADIS database, enabling easy switching between different local databases by specifying the “local_databases” parameter.&lt;/p&gt;
&lt;h4&gt;Toward a common API ?&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Preliminary work in Radis #465&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This preliminary work was done to prepare for a meeting between RADIS and ExoJax to discuss the implementation of a common API for database management.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The rationale behind this work is to maintain three layers of agnosticism to simplify the user experience:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Users should not have to worry about the specific format of the input database,&lt;/strong&gt; such as HITRAN 2012, HITRAN 2020, HITEMP, GEISA, ExoMol, Kuruz, NIST, etc. This allows for easy integration of new libraries and ensures that all codes can benefit from all available libraries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Users should not have to be concerned about the format in which the data is stored on disk&lt;/strong&gt;, whether it’s Vaex’s HDF5, Pandas’s HDF5, Feather, or other formats. This flexibility enables the switch to more performant libraries when they become available, such as PyArrow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Users should have the freedom to choose the output format used in calculations&lt;/strong&gt;, whether it’s Pandas’s DataFrame, Jax arrays, Vaex DataFrame, or others. This allows for data retrieval in the desired format for each code, such as Jax for ExoJax, Pandas for the current RADIS implementation, or Vaex for future fully-out-of-core RADIS for extreme databases.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Radis state in May 2022&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;ExoJax &lt;/strong&gt;has MdbExomol or MdbHIt . They are similar but don’t inherit from a common base ;&lt;br&gt;&lt;strong&gt;RADIS 0.12 has a DatabaseManager&lt;/strong&gt; to handle HITEMP 2020 / HITRAN 2020; the ExoMol support is done with a MdBMol taken from Exojax with no link with the DatabaseManager.&lt;br&gt;RADIS implemented a &lt;strong&gt;DataFileManager&lt;/strong&gt; &lt;strong&gt;class&lt;/strong&gt; to handle (Vaex’s HDF5; Pandas’s HDF5, Feather) ; DatabaseManager calls DataFileManager internally &lt;br&gt;Radis Exomol api update #464 added &lt;strong&gt;3 output : ’jax/vaex/pandas’&lt;/strong&gt; to RADIS’s DatabaseManager&lt;/p&gt;
&lt;p&gt;Here Radis then suggest a code a demonstration :&lt;/p&gt;
&lt;pre&gt;# Test ExoMol&lt;br&gt;&lt;br&gt;import radis&lt;br&gt;radis.config["MEMORY_MAPPING_ENGINE"] = "vaex" # 👉👉👉  choose  "vaex", "pytables", "feather"&lt;br&gt;&lt;br&gt;from radis.io.exomol import fetch_exomol&lt;br&gt;&lt;br&gt;df = fetch_exomol("SiO", database="EBJT", isotope="1", load_wavenum_max=5000, &lt;br&gt;        output="pandas" # 👉👉👉 choose : "pandas", "vaex", "jax"&lt;br&gt;        )&lt;br&gt;print(df)&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;p&gt;This code allows you to fetch ExoMol data for the SiO molecule from the specified database, control the output format, and print the resulting DataFrame.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;MdbExomol class&lt;/strong&gt; is a molecular database class specifically designed for ExoMol, which is a database of molecular line lists for exoplanet and other hot atmospheres. It is a subclass of the DatabaseManager class.&lt;/p&gt;
&lt;p&gt;The MdbExomol class has the following parameters:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;path&lt;/strong&gt;: The path for the ExoMol data directory or tag.&lt;br&gt;nurange: A wavenumber range list (in cm-1) or a wavenumber array.&lt;br&gt;margin: A margin for the wavenumber range (in cm-1).&lt;br&gt;&lt;strong&gt;crit:&lt;/strong&gt; The line strength lower limit for extraction.&lt;br&gt;&lt;strong&gt;bkgdatm&lt;/strong&gt;: The background atmosphere for broadening, e.g., H2, He.&lt;br&gt;broadf: If False, the default broadening parameters in the .def file are used.&lt;br&gt;Additionally, there are other parameters such as engine and skip_optional_data that control the memory mapping engine and the loading of optional data from the ExoMol definition file, respectively.&lt;/p&gt;
&lt;p&gt;The MdbExomol class provides methods to load and manage the ExoMol data files. It converts the trans/states files to feather or HDF5 format for efficient loading. The loaded data is stored in a DataFrame with columns such as nu_lines, Sij0, A, elower, gpp, jlower, and more. These columns contain information about line centers, line strengths, Einstein A coefficients, lower state energy, statistical weight, J_lower, and other relevant parameters.&lt;/p&gt;
&lt;p&gt;The class also provides examples of how to initialize the database, download the necessary files, and load the data. It references the original publications on ExoMol for more information.&lt;/p&gt;
&lt;h5&gt;Discussion between Radis and Exojax&lt;/h5&gt;&lt;p&gt;The question of hosting the common API was addressed for the first time in discussion&lt;strong&gt; #257&lt;/strong&gt;. It is suggested to create a new directory or module within Radis for the common API. However, it is noted that this may make development difficult if specific Radis features need to be integrated into the common API. A suggestion is made to create a separate module, such as “radis.api”, which would house the common API.&lt;/p&gt;
&lt;p&gt;A proposed structure was discussed, where the DatabaseManager class is considered the core common API. Subclasses, such as HitranManager and ExomolManager, inherited from DatabaseManager to provide the specific functionalities for the Hitran and Exomol databases, respectively.&lt;/p&gt;
&lt;p&gt;A suggestion was made to create a MdbHitran class (inheriting from HitranManager) and a MdbExomol class (inheriting from ExomolManager) for the ExoJAX API. These classes would have their own ExoJAX-specific methods, allowing ExoJAX to integrate with the common API.&lt;/p&gt;
&lt;p&gt;Radis and Exojax agreed that separating the functionalities into separate folders is a good approach to avoid conflicts between Radis-specific and ExoJAX-specific features. Additionally, they suggested to add tests to ensure that ExoJAX requirements were tested within Radis without causing any issues.&lt;/p&gt;
&lt;p&gt;It starts from the “radis.api” folder for the common API, which would be included within Radis. This approach would allow for the development of the common API while maintaining a close connection with Radis. Furthermore, the possibility of creating a new directory or module for an independent API in the future is considered, to allow the common API to become independent if needed.&lt;/p&gt;
&lt;p&gt;In summary, the conversation revolves around the hosting and structure of the common API between Radis and ExoJAX. It is decided to create a separate module, “radis.api”, for the common API while keeping the possibility of independent development in the future. Specific classes are proposed for ExoJAX, enabling the integration of ExoJAX into the common API. Measures are taken to separate Radis-specific and ExoJAX-specific functionalities and to test ExoJAX requirements within Radis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;After this discussion, a series of measures was implemented to Radis in PR # 480&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The common functions shared between Exojax and Radis were moved to the &lt;strong&gt;“radis/api”&lt;/strong&gt; directory, allowing for better organization and separation of concerns.&lt;br&gt;Parts of Hitran, Hitemp, CDSD, and GEISA &lt;strong&gt;that were common to both Exojax and Radis were also moved to the “radis/api”&lt;/strong&gt; directory.&lt;br&gt;The Exomol files were combined and moved to the “radis/api” directory, and tests were fixed accordingly.&lt;br&gt;The io.tools module was moved to the “radis/api/tools” directory for better organization.&lt;br&gt;Links in the documentation and docstrings were renamed to reflect the changes in the code structure.&lt;br&gt;Some missing files were added, isort errors on CI were fixed, and unclosed HDF5 files were addressed.&lt;br&gt;The Exomol documentation was updated, and error messages were improved.&lt;br&gt;The set_broadenings function was made compatible with both vaex and pandas DataFrames.&lt;br&gt;Modifications were made to the set_broadening function, including assuming a dictionary as input for unknown DataFrames and redefining the function to store values in a DataFrame.&lt;br&gt;The MdbExomol instance now includes self.molmass.&lt;br&gt;The codebase was merged with the upstream “add/common-api” branch.&lt;br&gt;Some abspath problems were fixed, and error messages were improved.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In November 2022, the version 0.14 was released and the common API with Exojax was added to Radis.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Review of the exomolapi.py code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This code is an API for accessing and using data from the ExoMol project. It includes a main class MdbExomol that allows downloading and accessing ExoMol files, as well as performing spectral calculations. The MdbExomol class provides methods for downloading files, creating PartFuncExoMol objects, and loading specific line data.&lt;/p&gt;
&lt;p&gt;The download function allows downloading ExoMol files from a specified URL and saving them locally. The to_partition_function_tabulator function generates a PartFuncExoMol object from the ExoMol-specific partition function data.&lt;/p&gt;
&lt;p&gt;The if __name__ == “__main__” section contains examples of using the MdbExomol class and other features of the API, including spectrum calculations using the RADIS library, and downloading and accessing ExoMol line data using the fetch_exomol function.&lt;/p&gt;
&lt;p&gt;Thus, the ExoMol API provides tools for downloading, manipulating, and utilizing spectroscopic data from the ExoMol project, including transition files, partition functions, and calculated spectra.&lt;/p&gt;
&lt;h4&gt;Conclusion : How should I proceed to add to Radis a new database as Kurucz ?&lt;/h4&gt;&lt;p&gt;Regarding implementing Kurucz, the structure of the exomolapi.py code can serve as a model for building a similar API for Kurucz data. I may create a class similar to MdbExomol that handles downloading Kurucz files, accessing the relevant data (such as atomic and molecular line data, partition functions, etc.), and provides methods for spectral calculations and other functionalities specific to Kurucz. I will have to adapt and modify the existing code to suit the data format and organization of Kurucz data.&lt;br&gt;In order to do so, I will review the structure of the Kurucz database and make a quick report in a next post before starting the implementation.&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=fc58bc4e9979" width="1"&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2023/06/20230604_2227_menasrac/</guid><pubDate>Sun, 04 Jun 2023 21:27:53 GMT</pubDate></item><item><title>Community Bonding Period</title><link>http://openastronomy.org/Universe_OA/posts/2023/06/20230601_0311_pupperemeritus/</link><dc:creator>pupper emeritus</dc:creator><description>&lt;h3&gt;


&lt;!-- TEASER_END --&gt;
Brief
&lt;/h3&gt;

&lt;p&gt;Hello everyone this is Sri Guru Datta P.(pupperemeritus). I am extremely excited to get started with my GSoC journey. It has been a dream come true for me.&lt;/p&gt;

&lt;p&gt;Most of the progress in these weeks has been done on the fronts of&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Re-adjusting the proposed schedule : Re-evaluating and taking a closer look at requirements&lt;/li&gt;
&lt;li&gt;Gathering more information required to implement : Been provided reference implementation in MATLAB by Dr. Jeff Scargle himself. And validating the plan and research done during the period of creating the project proposal.&lt;/li&gt;
&lt;li&gt;Had weekly meets to break the ice and communicate more directly through weekly meets with mentors.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;


Environment setup
&lt;/h3&gt;

&lt;p&gt;I had already completed my environment setup earlier in order to make pull requests to stingray. I just followed the documentation.&lt;br&gt;
&lt;a href="https://docs.stingray.science/install.html"&gt;https://docs.stingray.science/install.html&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;


Codebase familiarity
&lt;/h3&gt;

&lt;p&gt;I already had a bit of familiarity with powerspectrum, crossspectrum and bexvar modules as I had worked on various pull requests on them. My mentor advised me to look into multitaper, which I did. It gave me a few ideas on how I could implement this project.&lt;/p&gt;

&lt;h3&gt;


Coding
&lt;/h3&gt;

&lt;p&gt;I had already started a few days early and went ahead and implemented the Lomb-Scargle Fourier Transform which will be the backbone of the power spectrum and cross spectrum. 2 days into the coding period and I also have started coding up the wrapper classes. It turns out to be a very tangled process in order to get every small nook and cranny of the class to work. But I have seemed to get the hang of it.&lt;/p&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2023/06/20230601_0311_pupperemeritus/</guid><pubDate>Thu, 01 Jun 2023 02:11:02 GMT</pubDate></item><item><title>Utilising community bonding period Effectively!</title><link>http://openastronomy.org/Universe_OA/posts/2023/05/20230530_0000_1someshverma/</link><dc:creator>OpenAstronomy</dc:creator><description>&lt;p&gt;I started to contribute to RADIS from January’23 and whenever i needed help in some issue , mentors were quite helpful in providing revelant information to resolve that issue . And this thing helped me , to develop good bonding and understanding with the mentors .&lt;/p&gt;

&lt;p&gt;So,I thought, i should use community bonding period more productively thus, i decided to work on project from 15 May .&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;In community bonding period i have done following things -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read the RADIS and HITRAN Paper (selected parts)&lt;/li&gt;
&lt;li&gt;Worked on Loading the dataframe in Vaex format (task of first week)&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id="loading-dataframe-in-vaex-format"&gt;Loading Dataframe in Vaex format&lt;/h6&gt;
&lt;p&gt;There are two main functions which are used load databank in RADIS
These are :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fetch_databank()&lt;/li&gt;
&lt;li&gt;load_databank()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;fetch_databank() : It is used to load databank from standard databank like HITRAN,HITEMP,EXOMOL,GEISA by fetching it from their respective APIs, then parsing and processing them.&lt;/p&gt;

&lt;p&gt;load_databank() : It is used to load databank from the local file or to load databank from user defined databank .&lt;/p&gt;

&lt;p&gt;Upto now, i have worked on fetch_databank() function to load dataframe in Vaex format , some of the things were already implemented while at other points i needed to write code specifically for vaex dataframe format.&lt;/p&gt;

&lt;p&gt;Similarly, for load_databank() function , the hurdle was to parse it in vaex dataframe format as virual columns which are used in vaex dataframe to reduce memory use , it was throwing error . After trying many i finally found a fix for it .&lt;/p&gt;

&lt;p&gt;Now, I have made necessary changes to these two functions to load dataframe in Vaex format. Next week i will be working on writing test cases for these.&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2023/05/20230530_0000_1someshverma/</guid><pubDate>Mon, 29 May 2023 23:00:00 GMT</pubDate></item><item><title>Getting selected for GSoC’23@RADIS!</title><link>http://openastronomy.org/Universe_OA/posts/2023/05/20230524_0000_1someshverma/</link><dc:creator>OpenAstronomy</dc:creator><description>&lt;p&gt;I am Somesh Verma,a third year undergrad at National Institute of Technology Hamirpur. I have been accepted as contributor to the OpenAstronomy  RADIS.&lt;/p&gt;

&lt;h4 id="choosing-organisation"&gt;Choosing Organisation&lt;/h4&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I  chose OpenAstronomy as i have interest in astronomy right from my childhood and RADIS also aline with my interst and skills .I have also contributed to Libre Health App for Baby Care but then i shifted my focus  only to RADIS . By the end i had four merged pull request and I was working on the fifth issue.&lt;/p&gt;

&lt;h4 id="contriutions-and-experience"&gt;Contriutions and Experience&lt;/h4&gt;
&lt;p&gt;I started to contribute to RADIS from January’23 , initially i faced problem to set up the things and run the code . After one weel or so I fixed the issues and than I spent one week on understanding the codebase ,reading documentation and try examples. By now , i had developed a rough understanding of the code .&lt;/p&gt;

&lt;p&gt;Then , I started to find issue over which i can work and started to work on the issues ,mentors have been quite helpful so far, whenever i got struck somewhere ,they helped in resolving the issue .&lt;/p&gt;

&lt;p&gt;I am looking forward to have the great Learning experience this Summer with RADIS :)&lt;/p&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2023/05/20230524_0000_1someshverma/</guid><pubDate>Tue, 23 May 2023 23:00:00 GMT</pubDate></item><item><title>I Got Selected As A GSoC student at SunPy!</title><link>http://openastronomy.org/Universe_OA/posts/2023/05/20230521_1158_exitflynn/</link><dc:creator>exitflynn</dc:creator><description>&lt;h2 id="what-is-the-google-summer-of-code"&gt;What is The Google Summer of Code?
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#what-is-the-google-summer-of-code"&gt;
&lt;!-- TEASER_END --&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;It is a program by Google for promoting students to contribute to open-source communities.
It is also a  G R E A T  opportunity for us to work on projects with such big impact. I’m so glad I came to know about it. I loved that I could get this opportunity to work with
Now one could argue that that’s the opportunity Open-Source provides in general, which is true. It’s difficult to admit but I did need that initial push, some motivating factor to &lt;em&gt;truly&lt;/em&gt; make the effort and get my hands wet with contributing to an open-source project. However it’s as they say, the beginning’s the hardest part and that once you start contributing it becomes so much more easy to keep going. I think they’ve done a great job at incentivising Open-Source contributions.&lt;/p&gt;
&lt;h2 id="choosing-an-org"&gt;Choosing an Org
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#choosing-an-org"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;A lot of Organisations participate in GSoC. I had worked on a couple of #good-first-issues on a few projects before this period and had achieved that level of confidence where the language / tech-stack wasn’t the deciding factor for me anymore but it was now the project idea / the community.
I &lt;strong&gt;love&lt;/strong&gt; Astronomy and feel quite strongly about it. I am super-curious about how I can use my skills / to-be skills in tech in the field of Astronomy, some sort of an intersection of the two would actually be one of the most meaningful and enjoyable work I could find for myself.
Naturally, I looked into &lt;strong&gt;OpenAstronomy&lt;/strong&gt; as a GSoC org.
I’ve seen a lot of people prioritising those organisations which make for nicer addition to a resume from a product-based tech companies pov and it indeed &lt;em&gt;is&lt;/em&gt; a very smart way to go about it to be honest but I decided that I didn’t want to miss this unique opportunity to work on something I had wanted to do since a long time.
Under the sub-orgs for OpenAstronomy, I found &lt;strong&gt;SunPy&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="first-experience-with-sunpy"&gt;First Experience with SunPy
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#first-experience-with-sunpy"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Now, SunPy is a python library relating to solar physics. Though heliophysics wasn’t exactly something that I thought of when thinking of astrophysics or space-stuff, I was &lt;em&gt;really&lt;/em&gt; impressed by how active and supportive the community is. Besides, I found myself interested in the networking side of things more than the solar-physics stuff anyways as for now.&lt;/p&gt;
&lt;p&gt;While first going through the issues I came across one which included &lt;a href="https://github.com/sunpy/sunpy/issues/6692"&gt;detecting gzipped files from more than just the extension&lt;/a&gt; (via file-signatures / magic-bytes). I love when my familairity with using linux-based systems comes into play during development and I felt the issue to be quite approachable. During the PR Review, I remember going through the documentation for python’s &lt;code&gt;gzip&lt;/code&gt; module to verify that it doesn’t need to decompress a whole gzipped file and that we could decompress just enough to get the first couple of bits which include the file-signature (since otherwise it’d mean way too much overhead for the solution to be practical) and information on that is &lt;em&gt;not&lt;/em&gt; as easily available on the web as I’d like.&lt;/p&gt;
&lt;h2 id="subsequent-experience"&gt;Subsequent Experience
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#subsequent-experience"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I kept on making code-contributions which I felt approachable for some parts of January and February. And then I got a bit busy due to some health-reasons and college and organsing OSDHack ‘23 (I’ll totally write a blog-post on that later, it was such a nice success). I was a bit apprehensive because I was also looking forward to participate in the Google Summer of Code as a SunPy contributor and I didn’t want to give off the wrong impression so I wrote a (not)brief text to &lt;a href="https://github.com/Nabobalis"&gt;Nabil&lt;/a&gt; who was super-supportive. When the proposal submission period came around, it wasn’t the most ideal process since I ended up having to make the proposal in the last 2 days. Thankfully again, the community is super responsive and I reached out to both Nabil and &lt;a href="https://github.com/wtbarnes"&gt;Will&lt;/a&gt; for some feedback on my proposal and they both replied immediately.&lt;/p&gt;
&lt;h2 id="contributing-to-open-source-is-goated"&gt;Contributing to Open-Source is GOATed
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#contributing-to-open-source-is-goated"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;People in tech / software development should actually be talking about this so much more than they are. Some of the things that come to my mind right now are:&lt;/p&gt;
&lt;h3 id="its-a-great-way-to-learn-stuff"&gt;It’s a great way to learn stuff
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#its-a-great-way-to-learn-stuff"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;One of the main factors why I think people have a hard time contributing is that they think “I can’t contribute here because I don’t know nearly enough tech to do stuff”. The thing with being involved in this form of software development is that it gets you used to learning on the fly which is central to software development and doing well in any field, tbh.&lt;/p&gt;
&lt;p&gt;Contributing to big open-source projects helped me gained TREMENDOUS self-confidence. I could look at any issue on any repo now, and never think that it’s un-doable. No matter what domain or what language the project is in, it’s only a question of how much time it’d take to get through the relevant documentation and concepts. This is certainly a long way from “I can’t do $#!+ in this codebase if my life depended on it, it scares me” and I’m very much glad I could have this experience.&lt;/p&gt;
&lt;h3 id="the-best-practices-ever"&gt;The best practices ever
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#the-best-practices-ever"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;You get to learn how to write well-tested, well-documented and maintainable Production-Ready code following the best software development practices.&lt;/p&gt;
&lt;h3 id="you-get-to-choose-what-you-want-to-work-on"&gt;You get to choose what you &lt;em&gt;want&lt;/em&gt; to work on
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#you-get-to-choose-what-you-want-to-work-on"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;YEP! And most of the communities would love to have you work on it, that’s such an exciting thing if you ask me.&lt;/p&gt;
&lt;p&gt;(this post is a bit rough around the edges, I definitely want to add stuff to it but owing to my exams right now I’ll get to it at some later point of time, thanks for reading!)&lt;/p&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2023/05/20230521_1158_exitflynn/</guid><pubDate>Sun, 21 May 2023 10:58:10 GMT</pubDate></item><item><title>Blog GSoC project : Common API for large molecular database, RADIS.</title><link>http://openastronomy.org/Universe_OA/posts/2023/05/20230508_1207_menasrac/</link><dc:creator>Racim MENASRIA</dc:creator><description>&lt;h4&gt;Blog GSoC project : Common API for large molecular database, RADIS.&lt;/h4&gt;&lt;p&gt;Hello, I’m Racim MENASRIA a French engineering student at CentraleSupelec. I m glad to take part in the 2023 GSoC programm to contribute to Radis, a fast line-by-line code for high-resolution infrared molecular spectra.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/200/0*GIeb_J5QTLrhtfNj"&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/250/0*bNLY4YMhDxf2yxek"&gt;&lt;/figure&gt;&lt;p&gt;This blog will be used to post my results, remarks, difficulties or annything I consider useful to document my work.&lt;/p&gt;
&lt;p&gt;I’m looking forward to stard contributing :)&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=10c7a1c786e4" width="1"&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2023/05/20230508_1207_menasrac/</guid><pubDate>Mon, 08 May 2023 11:07:08 GMT</pubDate></item><item><title>GSoC - Pre Community Bonding</title><link>http://openastronomy.org/Universe_OA/posts/2023/05/20230507_0000_gaurav17joshi/</link><dc:creator>Jash Shah</dc:creator><description>&lt;h3 id="what-is-open-source-and-gsoc"&gt;What is Open-Source and Gsoc?&lt;/h3&gt;
&lt;p&gt;Open source software is software with source code that anyone can inspect, modify, and enhance. There are many institutions and individuals who write open software, mainly for research or free deployment purposes. Mostly these softwares, have only a few maintainers, and multiple people, writing and debugging the code, helps a lot. This is where Google Summer of Code &lt;code class="language-plaintext highlighter-rouge"&gt;GSOC&lt;/code&gt; comes into the picture. It is a global, online program focused on bringing new contributors into open source software development. Many organisations float projects for the developers to take over the summer and Google mediates in the process, while also paying the contributors for their work over the summer.&lt;/p&gt;

&lt;!-- TEASER_END --&gt;
&lt;h3 id="why-gsoc-for-me"&gt;Why GSOC for me?&lt;/h3&gt;
&lt;p&gt;Computer Science and Mathematics are two fields that I find to be most interesting. I first heard of Gsoc, when I was still finding my feet in the vast world of programming and computing. I was instantly sold to the idea of working for an organisation, and writing research code over summer. When I was searching for organisations and their project, I stumbled upon Open Astronomy, and in particular the project &lt;a href="https://openastronomy.org/gsoc/gsoc2023/#/projects?project=searching_for_quasi-periodic_oscillations_with_gaussian_processes"&gt;Searching for Quasi-Periodic Oscillations with Gaussian Processes&lt;/a&gt;, for the Stingray Library. The QPO project was an exceptional opportunity that aligned perfectly with my interests and aspirations. Utilizing the Gaussian Process, a sophisticated and effective mathematical tool for regression and classification problems, the project analyzed astronomical data from some of the universe’s most extreme sources, including quasars and neutron stars - areas of particular interest to me. Given my programming expertise, the project’s requirements were an ideal match, and I was eager to undertake it as a learning experience. Over the course of a month, I worked diligently to secure the project, confident that it was the ideal fit for my skillset and passion.&lt;/p&gt;

&lt;h3 id="my-contribution-experience"&gt;My contribution experience&lt;/h3&gt;
&lt;p&gt;My learnings from Gsoc began even before the project started. I had never worked on an open source package and the experience of making pull requests and getting them merged was very enriching.&lt;/p&gt;

&lt;p&gt;I must also add that through all this, my mentors helped me a lot in my project proposal as well as my code submissions. I would not have been able to make it this for without their help, and their patience in helping out with my amateur mistakes.&lt;/p&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2023/05/20230507_0000_gaurav17joshi/</guid><pubDate>Sat, 06 May 2023 23:00:00 GMT</pubDate></item><item><title>GSoC - Pre Community Bonding</title><link>http://openastronomy.org/Universe_OA/posts/2023/05/20230507_0000_labeeb-7z/</link><dc:creator>Labib Asari</dc:creator><description>&lt;h3 id="what-is-open-source-and-gsoc"&gt;What is Open-Source and Gsoc?&lt;/h3&gt;
&lt;p&gt;Open source software is software with source code that anyone can inspect, modify, and enhance. There are many institutions and individuals who write open software, mainly for research or free deployment purposes. Mostly these softwares, have only a few maintainers, and multiple people, writing and debugging the code, helps a lot. This is where Google Summer of Code &lt;code class="language-plaintext highlighter-rouge"&gt;GSOC&lt;/code&gt; comes into the picture. It is a global, online program focused on bringing new contributors into open source software development. Many organisations float projects for the developers to take over the summer and Google mediates in the process, while also paying the contributors for their work over the summer.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;</description><category>gnuastro</category><guid>http://openastronomy.org/Universe_OA/posts/2023/05/20230507_0000_labeeb-7z/</guid><pubDate>Sat, 06 May 2023 23:00:00 GMT</pubDate></item><item><title>GSoC Blog Zero</title><link>http://openastronomy.org/Universe_OA/posts/2023/05/20230506_2149_pupperemeritus/</link><dc:creator>pupper emeritus</dc:creator><description>&lt;p&gt;This is a test post to check the status of the blog and RSS feed. I am very excited to contribute to Stingray @ Open Astronomy this summer.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2023/05/20230506_2149_pupperemeritus/</guid><pubDate>Sat, 06 May 2023 20:49:25 GMT</pubDate></item></channel></rss>