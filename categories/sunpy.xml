<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy (Posts about SunPy)</title><link>http://openastronomy.org/Universe_OA/</link><description></description><atom:link href="http://openastronomy.org/Universe_OA/categories/sunpy.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 13 Nov 2023 00:58:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Docs and Marty and the Moving Around of Code and Tests</title><link>http://openastronomy.org/Universe_OA/posts/2023/08/20230812_0533_exitflynn/</link><dc:creator>exitflynn</dc:creator><description>&lt;p&gt;Since the last post, I worked on the moving-the-code task. Me, Nabil and Alasdair got on a call to discuss what should go where and I ended up creating a &lt;code&gt;scraper_utils.py&lt;/code&gt; file to complement the &lt;code&gt;scraper.py&lt;/code&gt; file. The other options were moving the functions to &lt;code&gt;.util.net&lt;/code&gt; or inside the &lt;code&gt;scraper.py&lt;/code&gt; file but outside the &lt;code&gt;Scraper&lt;/code&gt; class. After I moved the tests as well, I wrote new tests, increased test coverage and renamed some functions which were previously named in the JavaScript-style CamelCase.
I also added and extended doc-strings to some functions which could use some updating and made fixes as asked in Code-Reviews.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2023/08/20230812_0533_exitflynn/</guid><pubDate>Sat, 12 Aug 2023 04:33:30 GMT</pubDate></item><item><title>Across the Summer of Code</title><link>http://openastronomy.org/Universe_OA/posts/2023/07/20230729_0533_exitflynn/</link><dc:creator>exitflynn</dc:creator><description>&lt;p&gt;I spent the most part of my time since last blog-post working on the failing tests.
The most complex client to fix and the most complex client in general, the GOES Client, needed to be changed a bit. The problem that arose there was mainly because of how we earlier had the liberty of parsing out any variable given down in the pattern since that string would never be used to act as a url but since we also want it to do the job of the baseurl, we can’t have any to-be-determined value in the base parts. Since the client involved calling a helper function that returned the data for specific values of those variables, I had to modify the code to obtain those values from that part instead of extracting it again from the URL (since we put it there in the URL string in the first place).
Another issue was implementing a system for dealing with cases where there’s no numerical representation for the month in the file’s URL, i.e. in the &lt;code&gt;%B&lt;/code&gt; or &lt;code&gt;%b&lt;/code&gt; datetime formats cases.
&lt;!-- TEASER_END --&gt;
Aside from that, I added tests to cover the newer parts of the codebase that I added.
I also added documentation about writing the new patterns.&lt;/p&gt;
&lt;p&gt;I made changes as per the PR reviews and now, finally, with all tests (remote or otherwise) passing, and the documentation updated, the scraper rewrite draft PR is ready for review!&lt;/p&gt;
&lt;p&gt;I had a meeting with Nabil to discuss what I have to get done where I also showed him one of my fav pasttime activities, browsing open cameras using Shodan and also discussed about some general career advice.&lt;/p&gt;
&lt;p&gt;While everyone has a look at the changes, Nabil guided me about moving on to “moving-the-code” part of the project now, which I’ll be doing by branching off from my current branch, the scraper rewrite one, and then making a PR to it since it builds on top of those changes and it’ll take a while and some reviews for it to merge into main. This way the mentors can review the PR and suggest changes while I work on it.&lt;/p&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2023/07/20230729_0533_exitflynn/</guid><pubDate>Sat, 29 Jul 2023 04:33:30 GMT</pubDate></item><item><title>Wild Wild Tests</title><link>http://openastronomy.org/Universe_OA/posts/2023/07/20230714_0533_exitflynn/</link><dc:creator>exitflynn</dc:creator><description>&lt;h2 id="fool-proofing-the-rewrite"&gt;Fool-Proofing the Rewrite
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#fool-proofing-the-rewrite"&gt;
&lt;!-- TEASER_END --&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;After the last post, I mostly kept working on fixing the other failing tests and rewriting the tests to go with the newer pattern.&lt;/p&gt;
&lt;h2 id="not-all-failing-tests-are-built-same"&gt;Not All Failing Tests are Built Same
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#not-all-failing-tests-are-built-same"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I managed to take care of them in a couple of days, except the &lt;code&gt;sunpy/net/tests/test_scraper.py::testFilesRange_sameDirectory_local&lt;/code&gt; which proved to be a tough one to figure out. After discussing it a bit, I was able to figure it out, the error was caused because of a very unique flow of things which I think would be interesting to mention. I found out the test was failing because in the &lt;code&gt;_localfilelist()&lt;/code&gt; function, we update the pattern class variable, call different functions on it and then fix it back at the end. Though once I realised this, I was able to spot that I needed to update the second pattern as well in a similar way and I discussed different approaches to do this with the mentors but the flow in the function was a very fun and intuitive way to do things that stood out to me for reason and I just wanted to make a note of it to look back on :P.&lt;/p&gt;
&lt;p&gt;I also discussed my doubt relating to trying to shorten parse patterns by avoiding repetitions somehow but we came to the conclusion that we don’t really need to do that, if a pattern has repetitions in it then the user’s got to repeat stuff!&lt;/p&gt;
&lt;h2 id="was-that-it"&gt;Was that it?
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#was-that-it"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Now once all the scraper tests were passing, I thought the PR should be ready for review. I informed my mentors for the same. The PR received some suggestions, which I discussed and implemented according to the code review.&lt;/p&gt;
&lt;h2 id="the-plot-twist"&gt;The Plot Twist
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#the-plot-twist"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;For a few days, I remained under the impression that I had mostly rewritten the Scraper in a way that it works and only have to wait for suggestions from the code review. Nabil, Alasdair and I discussed that in the meanwhile I could look into which functions I can remove and move out of the Scraper. However, a plot twist unlike any other was still awaiting me and the realisation came when Nabil asked me if I had run the remote-tests yet. I had been running the &lt;code&gt;test-scraper.py&lt;/code&gt; tests so far, even the remote ones so my response was a vehement yes. When he mentioned that some were still failing, I remembered I was still to fix the examples in the documentation and once I had fixed the doctests it’d be passing. However at this point I was beginning to see the &lt;em&gt;real&lt;/em&gt; issue, so far I had only been fixing the tests limited to the scraper and NOT the rest of the codebase.&lt;/p&gt;
&lt;h2 id="a-whole-new-world"&gt;A Whole New World
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#a-whole-new-world"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I ran the tests to be greeted with very polite &lt;code&gt;105 failing tests&lt;/code&gt;. I informed this to my mentors and have begun working on fixing all the parts of the codebases which indirectly depend on this class. So far I’ve been encountering functions that may / may not have possibly gone redundant and am now exploring and considering which reducing functions, or removing them while fixing tests.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;Next Steps
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#next-steps"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I’ll keep on working on these new tests, while analysing both the scraper and related parts of the codebase outside for functions to rewrite, remove and/or move at the same time.
I also realised we’ll be needing new documentation about how to write the new parse-style patterns.&lt;/p&gt;
&lt;p&gt;That is all so far, until next time!&lt;/p&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2023/07/20230714_0533_exitflynn/</guid><pubDate>Fri, 14 Jul 2023 04:33:30 GMT</pubDate></item><item><title>Scraper Things</title><link>http://openastronomy.org/Universe_OA/posts/2023/06/20230630_0133_exitflynn/</link><dc:creator>exitflynn</dc:creator><description>&lt;p&gt;Most of the week was spent rewriting the Scraper functions to go with the new parse-pattern and then looking for edge cases in the new implementations, fixing bugs and updating tests.&lt;/p&gt;
&lt;h2 id="catching-up"&gt;{{Catching up}}
&lt;span&gt;
&lt;!-- TEASER_END --&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#catching-up"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In the scraper, while trying to merge &lt;code&gt;baseurl&lt;/code&gt; (an strftime formatted pattern i.e.&lt;code&gt; %Y%m&lt;/code&gt; etc) and &lt;code&gt;pattern&lt;/code&gt; (parse formatted pattern i.e. &lt;code&gt;{year:4d}{month:2d}&lt;/code&gt; etc), I faced two choices, we could either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make the input all parse-style formatted. generate the datetime-compatible string from here wherever it is required, however the problem i was running into here is parse-stuff like &lt;code&gt;{year:2d}&lt;/code&gt; will collide with &lt;code&gt;{instrument}&lt;/code&gt; like placeholders on which we mean to call &lt;code&gt;.format(**kwargs)&lt;/code&gt; on. All the ways I could think of pulling it off included adding a large no. of lines of code in the really early part of &lt;code&gt;__init__()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make the input all datetime formatted and generate the parse pattern from here. The problem with this is there are edge-cases when sometimes users define variables like &lt;code&gt;{Level:1d}&lt;/code&gt; which we have no way of knowing beforehand. One way to go about this could’ve been that we tell the user to define a pattern string in addition to baseurl whenever they have any new variables like that.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We ended up going with the first. My mentor, &lt;a href="https://github.com/Nabobalis"&gt;Nabil&lt;/a&gt; introduced me to how there’s a prevalence of using double-curly brackets in places where we need to escape / use them with single curly brackets, and sure enough, the &lt;code&gt;parse&lt;/code&gt; module supports that. So that took care of the problem there, I was mostly a bit concerned that I’ll have to go back to the second way even though I had started with it before pivoting to the first one.&lt;/p&gt;
&lt;h2 id="communication"&gt;Communication
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#communication"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Nabil pointed out that we weren’t being very good at communicating and that has a negative effect on the project which lead me to change how I was approaching it.&lt;/p&gt;
&lt;p&gt;A lot of times I was debugging things by including print statements here and there, and since my project now involves changing API it had me updating tests and a lot of these times the problem would just be in my understanding on how to convert the patterns and just how the new input should look like. Previously, I would only send a message on the matrix room when I had a question. And most of the times I’d still hold out hope for solving something by myself when I have the strength to pick it up later. But it also makes sense because there’d be no way to differentiate that from me not doing anything. Also around 75% of the time I’ve drafted out questions, I found out an answer along the way. From now on I realise instead of just asking questions, I should think of it as a logging / progress-updating activity first which sounds obvious in hindsight.&lt;/p&gt;
&lt;h2 id="to-regex-or-not-to-regex"&gt;To regex or not to regex
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#to-regex-or-not-to-regex"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;The next part where I was stuck at was in converting a pattern that involved custom placeholders like &lt;code&gt;{{CAR_ROT:4d}}&lt;/code&gt; or &lt;code&gt;{{:3d}}&lt;/code&gt; to their regex counterparts like  &lt;code&gt;(\d){3}&lt;/code&gt;, &lt;code&gt;(\d){16}&lt;/code&gt; etc without using like a l o t of regex, any less complex method than using a conversion function etc. However, after a quick conversation with the mentors and I realised that I had been mistakenly assuming that strftime required regex patterns. Earlier I thought that regex would no longer be part of the end-user experience but still somehow exist in the codebase but this is when I realised that we can entirely do away with it.&lt;/p&gt;
&lt;h2 id="rewrite-then-remove-"&gt;Rewrite then Remove? 💀
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#rewrite-then-remove-"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I also realised that the &lt;code&gt;_extractDateURL()&lt;/code&gt; function was made redundant &lt;em&gt;after&lt;/em&gt; rewriting it since I found out later that it was only called at one place and that part of the code was no longer required thanks to the existence of a parse-pattern. That’s a nice message to keep in mind for the future.&lt;/p&gt;
&lt;h2 id="modern-day-cain"&gt;Modern Day Cain
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#modern-day-cain"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Another question I encountered was if we could assume that any {year:2d} or %y type 2-digit year xx to be interpreted to be in the 21st century like 20xx or not.&lt;/p&gt;
&lt;h2 id="issue-found"&gt;Issue found
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#issue-found"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I also found this bug in the codebase:
In the current &lt;code&gt;scraper._check_timerange()&lt;/code&gt;, it takes the simpler way &lt;code&gt;if&lt;/code&gt; we provide it with an extractor // parse-pattern and a more complex way if we don’t, however as it is implemented right now&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0"&gt;&lt;code class="language-python"&gt;&lt;span style="display: flex;"&gt;&lt;span&gt;&lt;span style="color: #f92672;"&gt;from&lt;/span&gt; sunpy.net.scraper &lt;span style="color: #f92672;"&gt;import&lt;/span&gt; Scraper
&lt;/span&gt;&lt;/span&gt;&lt;span style="display: flex;"&gt;&lt;span&gt;&lt;span style="color: #f92672;"&gt;from&lt;/span&gt; sunpy.time &lt;span style="color: #f92672;"&gt;import&lt;/span&gt; TimeRange
&lt;/span&gt;&lt;/span&gt;&lt;span style="display: flex;"&gt;&lt;span&gt;s &lt;span style="color: #f92672;"&gt;=&lt;/span&gt; Scraper(&lt;span style="color: #e6db74;"&gt;'%Y.fits'&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display: flex;"&gt;&lt;span&gt;s&lt;span style="color: #f92672;"&gt;.&lt;/span&gt;_check_timerange(&lt;span style="color: #e6db74;"&gt;'2014.fits'&lt;/span&gt;, TimeRange(&lt;span style="color: #e6db74;"&gt;"2015-01-01"&lt;/span&gt;, &lt;span style="color: #e6db74;"&gt;"2015-01-02"&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;would return True and it is intended that way in the tests but if we passed it an extractor // parse pattern&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0"&gt;&lt;code class="language-python"&gt;&lt;span style="display: flex;"&gt;&lt;span&gt;s&lt;span style="color: #f92672;"&gt;.&lt;/span&gt;extractor &lt;span style="color: #f92672;"&gt;=&lt;/span&gt; &lt;span style="color: #e6db74;"&gt;"&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;{year:4d}&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;.fits"&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display: flex;"&gt;&lt;span&gt;s&lt;span style="color: #f92672;"&gt;.&lt;/span&gt;_check_timerange(&lt;span style="color: #e6db74;"&gt;'2014.fits'&lt;/span&gt;, TimeRange(&lt;span style="color: #e6db74;"&gt;"2015-01-01"&lt;/span&gt;, &lt;span style="color: #e6db74;"&gt;"2015-01-02"&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;it’d return False.&lt;/p&gt;
&lt;h2 id="inclusivity-is-important"&gt;Inclusivity is important
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#inclusivity-is-important"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Failing tests required me to inqure if we want closed-intervals in the package or open, which concluded with closed. I also found other instances in the codebase where we endorse closed intervals.&lt;/p&gt;
&lt;h2 id="future-steps"&gt;Future steps
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#future-steps"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Cover why the rest of tests are breaking and fix em.
Ask for review once everything works.
Try to come up with a way to write parse-patterns so as the length remains less by trying to minimize repeated values.
Also fix my Hugo setup before the night -_-&lt;/p&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2023/06/20230630_0133_exitflynn/</guid><pubDate>Fri, 30 Jun 2023 00:33:30 GMT</pubDate></item><item><title>Into the Summer of Code</title><link>http://openastronomy.org/Universe_OA/posts/2023/06/20230624_0133_exitflynn/</link><dc:creator>exitflynn</dc:creator><description>&lt;p&gt;I had my end-semester exams during the Community Bonding Period and the real-early part of the Coding Period. However, my mentors were super-accomodating.
I spent a few days on plans with friends before bidding goodbye for the summers, travelling home and relaxing a bit.&lt;/p&gt;
&lt;h3 id="the-talk"&gt;The Talk
&lt;!-- TEASER_END --&gt;
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#the-talk"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;This was also the time when IIT BHU reached out to me for a talk as part of a collab between their Astronomy and Open-Source clubs about Astronomy in tech and OSS. This was a  g r e a t  experience! I’ve always wanted to improve at public-speaking stuff and to finally pull off a satisfactory talk was a great experience. Also Prayash was a great host.&lt;/p&gt;
&lt;h3 id="beginning-with-the-project"&gt;Beginning with the Project
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#beginning-with-the-project"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;My mentor, Nabil, had asked me to start by writing tests for the scraper, even if they may not return a -ve)for all the URLs it doesn’t support now.
Looking closely though, all the issues were due to limitations of the way regex is implemented for inputting URLs, i.e. since one of the main goals of the project was to remove regex and use parse instead, these tests would have proven to be quite redundant. I asked my mentors and understandably so, Nabil said that he doesn’t want me working on code that I might have to remove soon enough and said I can proceed to the rest of the rewrite.&lt;/p&gt;
&lt;p&gt;After that, I began reading up on what Metaclasses, Abstract Base Classes (ABCs), etc are, their advantages and how they can be implemented in python to decide which would be better for the purpose of the project. However, at this point I wasn’t really maintaining good communication with my mentors. When they asked me for any updates and then inquired about why I had been reading up on ABCs and such, they clarified that I should be able to improve the scraper without going that route.&lt;/p&gt;
&lt;p&gt;Had to take a couple of days off in between for unavoidable reasons.&lt;/p&gt;
&lt;p&gt;After that I took some calls with my mentors, clarifying details and trying to work things through together as I figured out what I should do next.
All the scraper // dataretriever clients require two strings, &lt;code&gt;baseurl&lt;/code&gt; and &lt;code&gt;pattern&lt;/code&gt; and I figure out a way to merge them somehow.
I looked into just what role the two of them had and found that &lt;code&gt;pattern&lt;/code&gt; was used only to parse data.
For example, When writing scraper clients, we require a baseurl and a pattern, an example from the NOAA Client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0"&gt;&lt;code class="language-python"&gt;&lt;span style="display: flex;"&gt;&lt;span&gt;baseurl &lt;span style="color: #f92672;"&gt;=&lt;/span&gt; &lt;span style="color: #e6db74;"&gt;r&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;'ftp://ftp.ngdc.noaa.gov/STP/swpc_products/daily_reports/solar_region_summaries/%Y/%m/%Y%m&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;%d&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;SRS.txt'&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display: flex;"&gt;&lt;span&gt;pattern &lt;span style="color: #f92672;"&gt;=&lt;/span&gt; &lt;span style="color: #e6db74;"&gt;'&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;{}&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;/&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;{year:4d}&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;/&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;{month:2d}&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;/&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;{year:4d}{month:2d}{day:2d}&lt;/span&gt;&lt;span style="color: #e6db74;"&gt;SRS.txt'&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of passing both, we should be able to merge them into just one since the pattern string is conveying information that is already available in the baseurl.&lt;/p&gt;
&lt;p&gt;I figured it should be possible to transform &lt;code&gt;baseurl&lt;/code&gt; to &lt;code&gt;pattern&lt;/code&gt; and generate &lt;code&gt;pattern&lt;/code&gt; that way but halfway through I realised that it’d not be possible. However we should be able to convert a full &lt;code&gt;pattern&lt;/code&gt; to it’s &lt;code&gt;baseurl&lt;/code&gt; formatted counterpart.&lt;/p&gt;
&lt;p&gt;I remember writing out loud what I thought as I approached that problem:&lt;/p&gt;
&lt;h3 id="rubber-ducky-microblogging"&gt;rubber ducky microblogging?
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#rubber-ducky-microblogging"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;now how do we include this transformation in our code?
we have mainly two places / files of concern.
&lt;code&gt;dataretriever/client.py&lt;/code&gt; and &lt;code&gt;scraper.py&lt;/code&gt;
at this point there are a couple of ways to go about it that come to my mind, all of them would however can be categorised as:
a) include the transformation in dr/client.py
b) include it in scraper.py&lt;/p&gt;
&lt;p&gt;before i get ahead of myself, it’s better to arrive at a concrete decision here, if that’s possible, to avoid having too much of overhead.&lt;/p&gt;
&lt;p&gt;case a:
pattern transforms in client and is then sent to scraper. this means the scraper still operates on strftime baseurl.
and when we want to call the parse function, instead of sending pattern as we do now, we can just send the original new format&lt;/p&gt;
&lt;p&gt;case b:
pass the new format to scraper. scraper converts it into strftime to use in all of its functions, and&lt;/p&gt;
&lt;p&gt;the second approach makes more sense, yeah.&lt;/p&gt;
&lt;p&gt;NOW
what’d be a nice way to incorporate this transform in the scraper file?&lt;/p&gt;
&lt;p&gt;So there have to be Two strings/patterns, throughout this codebase.
the strftime kind and the parse kind.
what we input is the parse kind (since we can convert this to strftime, and the other way around wasn’t possible)&lt;/p&gt;
&lt;p&gt;how to incorporate both strings? make them both private members of the Scraper class?&lt;/p&gt;
&lt;p&gt;some functions will be changed as a result of this&lt;/p&gt;
&lt;p&gt;like _URL_followsPattern&lt;/p&gt;
&lt;p&gt;okay so the plan of action is:
go add a transform function, call it in init
we’ll have a variable for the time_pattern, update pattern -&amp;gt; time_pattern wherever applicable.
rewrite using parse wherever applicable&lt;/p&gt;
&lt;p&gt;but this would take away from having a standard system and we’ll be defining our own set of names to name variables as.&lt;/p&gt;
&lt;p&gt;also a future plan can be to check for redundant functions / moving code.&lt;/p&gt;
&lt;h3 id="in-conclusion"&gt;in conclusion
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#in-conclusion"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;So as of right now, I’ve been working on &lt;a href="https://github.com/sunpy/sunpy/issues/7073"&gt;#7073&lt;/a&gt; and &lt;a href="https://github.com/sunpy/sunpy/pull/7077"&gt;PR #7077&lt;/a&gt;, more details on this issue and my proposed solution can be found in the issue description.&lt;/p&gt;
&lt;p&gt;This’ll be all for now, will be posting more in the future.&lt;/p&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2023/06/20230624_0133_exitflynn/</guid><pubDate>Sat, 24 Jun 2023 00:33:30 GMT</pubDate></item><item><title>Getting Selected As A GSoC student at SunPy</title><link>http://openastronomy.org/Universe_OA/posts/2023/05/20230521_1258_exitflynn/</link><dc:creator>exitflynn</dc:creator><description>&lt;h2 id="what-is-the-google-summer-of-code"&gt;What is The Google Summer of Code?
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#what-is-the-google-summer-of-code"&gt;
&lt;!-- TEASER_END --&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;It is a program by Google for promoting students to contribute to open-source communities.
It is also a  G R E A T  opportunity for us to work on projects with such big impact. I’m so glad I came to know about it. I loved that I could get this opportunity to work with people involved in developing software that is used by many.
Now one could argue that that’s the opportunity Open-Source provides in general, which is true. It’s difficult to admit but I did need that initial push, some motivating factor to &lt;em&gt;truly&lt;/em&gt; make the effort and get my hands wet with contributing to an open-source project. However it’s as they say, the beginning’s the hardest part and that once you start contributing it becomes so much more easy to keep going. I think they’ve done a great job at incentivising Open-Source contributions.&lt;/p&gt;
&lt;h2 id="choosing-an-org"&gt;Choosing an Org
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#choosing-an-org"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;A lot of Organisations participate in GSoC. I had worked on a couple of #good-first-issues on a few projects before this period and had achieved that level of confidence where the language / tech-stack wasn’t the deciding factor for me anymore but it was now the project idea / the community.
I &lt;strong&gt;love&lt;/strong&gt; Astronomy and feel quite strongly about it. I am super-curious about how I can use my skills / to-be skills in tech in the field of Astronomy, some sort of an intersection of the two would actually be one of the most meaningful and enjoyable work I could find for myself.
Naturally, I looked into &lt;strong&gt;OpenAstronomy&lt;/strong&gt; as a GSoC org.
I’ve seen a lot of people prioritising those organisations which make for nicer addition to a resume from a product-based tech companies pov and it indeed &lt;em&gt;is&lt;/em&gt; a very smart way to go about it to be honest but I decided that I didn’t want to miss this unique opportunity to work on something I had wanted to do since a long time.
Under the sub-orgs for OpenAstronomy, I found &lt;strong&gt;SunPy&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="first-experience-with-sunpy"&gt;First Experience with SunPy
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#first-experience-with-sunpy"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Now, SunPy is a python library relating to solar physics. Though heliophysics wasn’t exactly something that I thought of when thinking of astrophysics or space-stuff, I was &lt;em&gt;really&lt;/em&gt; impressed by how active and supportive the community is. Besides, I found myself interested in the networking side of things more than the solar-physics stuff anyways as for now.&lt;/p&gt;
&lt;p&gt;While first going through the issues I came across one which included &lt;a href="https://github.com/sunpy/sunpy/issues/6692"&gt;detecting gzipped files from more than just the extension&lt;/a&gt; (via file-signatures / magic-bytes). I love when my familairity with using linux-based systems comes into play during development and I felt the issue to be quite approachable. During the PR Review, I remember going through the documentation for python’s &lt;code&gt;gzip&lt;/code&gt; module to verify that it doesn’t need to decompress a whole gzipped file and that we could decompress just enough to get the first couple of bits which include the file-signature (since otherwise it’d mean way too much overhead for the solution to be practical) and information on that is &lt;em&gt;not&lt;/em&gt; as easily available on the web as I’d like.&lt;/p&gt;
&lt;h2 id="subsequent-experience"&gt;Subsequent Experience
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#subsequent-experience"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;I kept on making code-contributions which I felt approachable for some parts of January and February. And then I got a bit busy due to some health-reasons and college and organsing OSDHack ‘23 (I’ll totally write a blog-post on that later, it was such a nice success). I was a bit apprehensive because I was also looking forward to participate in the Google Summer of Code as a SunPy contributor and I didn’t want to give off the wrong impression so I wrote a (not)brief text to &lt;a href="https://github.com/Nabobalis"&gt;Nabil&lt;/a&gt; who was super-supportive. When the proposal submission period came around, it wasn’t the most ideal process since I ended up having to make the proposal in the last 2 days. Thankfully again, the community is super responsive and I reached out to both Nabil and &lt;a href="https://github.com/wtbarnes"&gt;Will&lt;/a&gt; for some feedback on my proposal and they both replied immediately.&lt;/p&gt;
&lt;h2 id="contributing-to-open-source-is-goated"&gt;Contributing to Open-Source is GOATed
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#contributing-to-open-source-is-goated"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;People in tech / software development should actually be talking about this so much more than they are. Some of the things that come to my mind right now are:&lt;/p&gt;
&lt;h3 id="its-a-great-way-to-learn-stuff"&gt;It’s a great way to learn stuff
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#its-a-great-way-to-learn-stuff"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;One of the main factors why I think people have a hard time contributing is that they think “I can’t contribute here because I don’t know nearly enough tech to do stuff”. The thing with being involved in this form of software development is that it gets you used to learning on the fly which is central to software development and doing well in any field, tbh.&lt;/p&gt;
&lt;p&gt;Contributing to big open-source projects helped me gained TREMENDOUS self-confidence. I could look at any issue on any repo now, and never think that it’s un-doable. No matter what domain or what language the project is in, it’s only a question of how much time it’d take to get through the relevant documentation and concepts. This is certainly a long way from “I can’t do $#!+ in this codebase if my life depended on it, it scares me” and I’m very much glad I could have this experience.&lt;/p&gt;
&lt;h3 id="the-best-practices-ever"&gt;The best practices ever
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#the-best-practices-ever"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;You get to learn how to write well-tested, well-documented and maintainable Production-Ready code following the best software development practices.&lt;/p&gt;
&lt;h3 id="you-get-to-choose-what-you-want-to-work-on"&gt;You get to choose what you &lt;em&gt;want&lt;/em&gt; to work on
&lt;span&gt;
&lt;a href="https://exitflynn.github.io/blog/tags/gsoc/index.xml#you-get-to-choose-what-you-want-to-work-on"&gt;
&lt;svg height="100%" viewbox="0 0 28 23" width="19" xmlns="http://www.w3.org/2000/svg"&gt;&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"&gt;&lt;/path&gt;&lt;/path&gt;&lt;/svg&gt;
&lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;YEP! And most of the communities would love to have you work on it, that’s such an exciting thing if you ask me.&lt;/p&gt;
&lt;p&gt;(this post is a bit rough around the edges, I definitely want to add stuff to it but owing to my exams right now I’ll get to it at some later point of time, thanks for reading!)&lt;/p&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2023/05/20230521_1258_exitflynn/</guid><pubDate>Sun, 21 May 2023 11:58:10 GMT</pubDate></item><item><title>Google Summer of Code 2022 —  Building, Testing, and Wrapping Helioviewer API in a Python package</title><link>http://openastronomy.org/Universe_OA/posts/2022/09/20220908_0520_akash5100/</link><dc:creator>Akash</dc:creator><description>&lt;h4&gt;Google Summer of Code 2022 — Building, Testing, and Wrapping Helioviewer API in a Python package&lt;/h4&gt;&lt;p&gt;Hello everyone! This summer my project proposal to &lt;a href="https://openastronomy.org/"&gt;&lt;strong&gt;OpenAstronomy&lt;/strong&gt;&lt;/a&gt; got accepted. I recently posted a series of blogs sharing my GSoC experience and the work I have done. This blog post details my experience of participating in the program and the contributions that I made to the Project-Helioviewer. If you haven’t read my previous blog posts, no worries, I will try to sum up all of them in this blog.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*jwdds34BjOqlPnJUYjKWdw.gif"&gt;&lt;/figure&gt;&lt;h4&gt;Starting Point&lt;/h4&gt;&lt;p&gt;I started contributing to open-source projects in September 2021, my friend &lt;a href="https://medium.com/u/831b54c52c2"&gt;Vivek Agrawal&lt;/a&gt; told me about the Google Summer of Code program, and since then I had an eye for GSoC 2022. I did all the research and through the timeline, I knew that on the 7th of March Google will release the list of accepted organizations participating as mentors in 2022, I continued building my developer skills.&lt;/p&gt;
&lt;p&gt;On March 7th, I searched for organizations that matched my interest, i.e, science. When I saw &lt;a href="https://summerofcode.withgoogle.com/programs/2022/organizations/openastronomy"&gt;&lt;strong&gt;openAstronomy&lt;/strong&gt;&lt;/a&gt; at that moment I was like: &lt;em&gt;what the heck&lt;/em&gt;? &lt;em&gt;astronomy and open source together? &lt;/em&gt;👾👾👾&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I set my goal, focused only on one project and started to understand the project idea. I joined the mailing list and connected with the project mentors and talked to them about my implementation ideas. While I prepared the proposal, I also made the following contributions to &lt;a href="http://sunpy.org"&gt;SunPy&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunpy/pull/5980"&gt;#&lt;strong&gt;5980&lt;/strong&gt;&lt;/a&gt; (code) and &lt;a href="https://github.com/sunpy/sunpy/pull/6024"&gt;#&lt;strong&gt;6024&lt;/strong&gt;&lt;/a&gt; (updating docs), I wrote a test case for &lt;a href="https://docs.sunpy.org/en/stable/code_ref/timeseries.html"&gt;SunPy.timeseries&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/sunpy/sunpy/pull/5961"&gt;#&lt;strong&gt;5961&lt;/strong&gt;&lt;/a&gt; adds an example to show “how to reproject a map to a map projection with a custom origin”.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In the one month before the results, to learn more about software testing and get familiar with &lt;a href="https://docs.pytest.org/en/7.1.x/"&gt;&lt;strong&gt;pytest&lt;/strong&gt;&lt;/a&gt;, I searched for issues labeled “Tests” in SunPy and &lt;a href="https://github.com/sunpy/sunpy/pull/6110"&gt;submitted this pull request&lt;/a&gt;🚀.&lt;/p&gt;
&lt;h5&gt;The Community Bonding Period&lt;/h5&gt;&lt;p&gt;After getting selected for the program, I continued my contribution to SunPy. I worked on a python script that updates vendor code automatically in this &lt;a href="https://github.com/sunpy/sunpy/pull/6127"&gt;pull request&lt;/a&gt;. In a meeting, I met my mentor &lt;a href="https://github.com/nabobalis"&gt;&lt;strong&gt;Nabil Freij&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://github.com/wafels"&gt;&lt;strong&gt;Jack Ireland&lt;/strong&gt;&lt;/a&gt;, and &lt;a href="https://github.com/dgarciabriseno"&gt;&lt;strong&gt;Daniel Garcia Briseno&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;and we discussed the project plan.&lt;/p&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;&lt;p&gt;In this program, I wrapped the Helioviewer API in a Python package. The development of this project is supported by the &lt;a href="https://summerofcode.withgoogle.com/"&gt;2022 Google Summer of Code&lt;/a&gt;, the umbrella &lt;a href="https://openastronomy.org/"&gt;&lt;strong&gt;OpenAstronomy&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://sunpy.org/"&gt;&lt;strong&gt;SunPy&lt;/strong&gt; &lt;strong&gt;Project&lt;/strong&gt;&lt;/a&gt;, and the &lt;a href="https://github.com/Helioviewer-Project/"&gt;&lt;strong&gt;Helioviewer Project&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h5&gt;HvPy&lt;/h5&gt;&lt;p&gt;&lt;a href="http://helioviewer.org/"&gt;&lt;em&gt;Helioviewer.org&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is part of the &lt;/em&gt;&lt;a href="https://github.com/helioviewer-project"&gt;&lt;em&gt;Helioviewer Project&lt;/em&gt;&lt;/a&gt;&lt;em&gt;, an open-source project for the visualization of solar and heliospheric data. The Helioviewer Project is funded by &lt;/em&gt;&lt;a href="https://www.esa.int/"&gt;&lt;em&gt;ESA&lt;/em&gt;&lt;/a&gt;&lt;em&gt; and &lt;/em&gt;&lt;a href="https://www.nasa.gov/"&gt;&lt;em&gt;NASA&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;HvPy is a python interface for interacting with Helioviewer’s Web API. This means all API calls are done by sending an HTTP request and parsing the response. Since this action is common for all API requests, it is encapsulated by the API core in HvPy. Certain parameters are provided to the core via an instance of HvpyParameters. This instance contains all information necessary to perform the API request. It contains the target URL, the input parameters, and the expected output type. Using this information, the HTTP Requester will be able to perform the request and coerce the result into the desired type.&lt;/p&gt;
&lt;h5&gt;Request Workflow&lt;/h5&gt;&lt;p&gt;Each request takes a set of Input Parameters. The metadata defined in the HvpyParameters class is needed for an API request. It contains the InputParameters , expected OutputType and the API URL for the request. Using this information, the module core performs the HTTP request and parses the result into the expected type.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/257/1*4Np77RI0N9F3_kj21zCfxg.png"&gt;&lt;figcaption&gt;Request workflow diagram&lt;/figcaption&gt;&lt;/figure&gt;&lt;h5&gt;Front-end&lt;/h5&gt;&lt;p&gt;Much of the design mentioned above is for internal use when adding new API endpoints or modifying the internal behavior of this module. The internal design allows for ease of adding new APIs, validating input parameters, and keeping the code DRY.&lt;/p&gt;
&lt;p&gt;The actual front end that users will interface with lives in facade.py as it is the façade that hides this internal design. This module contains the API interface in its simplest form. It is responsible for taking user input, constructing the HvpyParameters instance, and passing it along to the core to perform the request.&lt;/p&gt;
&lt;h5&gt;Utils&lt;/h5&gt;&lt;p&gt;We got clean and simple front-end functions for every endpoint. For some endpoint to make a query you need to design a string called LayerString and EventString which looks like: —&lt;/p&gt;
&lt;pre&gt;layers = "[9,1,100],[19,1,50]"&lt;br&gt;events = "[AR,all,1],[CD,all,1]"&lt;/pre&gt;&lt;p&gt;Right, it is difficult to write this string for a beginner. So to save users from this difficult process we have these utility functions.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Creating the layer string&lt;br&gt; — This function takes a list of tuples of the form (Source id, Opacity). We defined an Enum for the users to get the source id of the required data source. &lt;a href="https://hvpy.readthedocs.io/en/latest/api/hvpy.datasource.DataSource.html#hvpy.datasource.DataSource"&gt;Visit here to see all the possible Data Sources supported by Helioviewer.&lt;/a&gt; Let's see how we create a layer string for &lt;a href="https://www.nasa.gov/content/goddard/sdo-aia-131-angstrom/#:~:text=AIA%20131%20%C3%85%20%2D%20Solar%20Region,are%20typically%20colorized%20in%20teal."&gt;AIA_131&lt;/a&gt; with 100% opacity along with an &lt;a href="https://www.nasa.gov/content/goddard/sdo-hmi-magnetogram/"&gt;HMI Magnetogram&lt;/a&gt; with 50% opacity.&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; from hvpy import DataSource, create_layers&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; create_layers([(DataSource.AIA_131, 100), (DataSource.HMI_MAG, 50)])&lt;br&gt;‘[9,1,100],[19,1,50]’&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Creating the events string&lt;br&gt; — This function takes a list of tuples of the form (event type, recognition methods). We defined an Enum for the users to get event types. &lt;a href="https://hvpy.readthedocs.io/en/latest/api/hvpy.EventType.html#hvpy.EventType"&gt;Here is a list of all the supported Event Types by Helioviewer.&lt;/a&gt; To generate an event string for Active Region and Coronal Dimming we do: —&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; from hvpy import EventType, create_events&lt;br&gt;&amp;gt;&amp;gt;&amp;gt; create_events([EventType.ACTIVE_REGION,&lt;br&gt;EventType.CORONAL_DIMMING])&lt;br&gt;‘[AR,all,1],[CD,all,1]’&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;Saving the file&lt;br&gt; — Some endpoint in response returns binary data. It may be JPEG, JPEG2000, mp4, PNG, etc. To write these binary data in your harddisk we have a helper function called save_file. This function takes in the following arguments: —&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;save_file(data: bytearray, filename: Union[Path, str], overwrite: bool = False)&lt;/pre&gt;&lt;p&gt;The overwrite flag will overwrite the existing file with the same name and Path.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;Helpers&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;To create a movie (mp4, WebM, Flv) we need to query the queueMovie endpoint and then use source id of the response to download the movie using the downloadMovie endpoint. To automate this process we have a helper function called createMovie.&lt;/p&gt;
&lt;p&gt;Here is the function in use: —&lt;/p&gt;
&lt;a href="https://medium.com/media/b982e24dd91b304503327c9a6e2d377f/href"&gt;https://medium.com/media/b982e24dd91b304503327c9a6e2d377f/href&lt;/a&gt;&lt;p&gt;And this is the result 👇&lt;/p&gt;
&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1bTtoBnWSlxK_RS06ZReE1G6tBfGdanLu/view?usp=sharing"&gt;2022-9-1_2022-9-5.mp4&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;Week 10&lt;/h5&gt;&lt;p&gt;In week 9 we decided to use the beta URL for query and by the end of the week, it is ready for testing (for more details &lt;a href="https://medium.com/@akash5100/gsoc-2022-project-helioviewer-moving-close-to-the-first-release-c43249d042d9"&gt;read my week 7–9 blog post&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So the next task was to implement the remaining endpoint backends and bring them to the façade. I opened the following PRs for the remaining endpoints.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/57"&gt;&lt;strong&gt;#57 &lt;/strong&gt;&lt;/a&gt;— downloadMovie (this takes in a movie IDand returns binary data).&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/58"&gt;&lt;strong&gt;#58&lt;/strong&gt;&lt;/a&gt; — shortenURL (shorten a Helioviewer.org URL with the bit.ly URL shortening web service) and getNewsFeed (get the XML RSS feed of the official Helioviewer Project Blog).&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/59"&gt;&lt;strong&gt;#59&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;— getTile (requests a single image tile to be used in the Helioviewer.org Viewport. Tiles are 512x512 pixel PNG images, generated for a given image scale from the intermediary JPEG2000 image files).&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Yay!! the last endpoint got merged.&lt;/p&gt;
&lt;p&gt;There is a huge &lt;a href="https://api.helioviewer.org/docs/v2/appendix/data_sources.html"&gt;list of &lt;strong&gt;data sources&lt;/strong&gt;&lt;/a&gt; to capture the sun image, for example, SDO, SOHO, Hinode, etc. We use these data source IDs to query the server. So to keep the process user-friendly we decided to store all the IDs in a Enum. This way one needs to remember the data source ID.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/61"&gt;&lt;strong&gt;#61&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Adds Enum for the DataSource.&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;Week 11&lt;/h5&gt;&lt;p&gt;After we have the DataSource Enum, I implemented the create_layers function that we talked about above.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/65"&gt;&lt;strong&gt;#65&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Function to generate the layer string.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;We also have a list of &lt;a href="https://www.lmsal.com/hek/api.html"&gt;feature/event types&lt;/a&gt;, for example, Active region, Bright point, Flare, etc. Each event types have a Feature code. We did the same with Event Types as we did with the data sources. We decided to store all the feature code in a Enum.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/70"&gt;&lt;strong&gt;#70&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Adds Enum for EventTypes.&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;Week 12&lt;/h5&gt;&lt;p&gt;Now we got the Enum for EventType, I implemented the create_event function to automate the creation of an event string for the query.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/71"&gt;&lt;strong&gt;#71&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;create_event function to create event string.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After this, I implemented the save_file function which we talk about above.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/72"&gt;&lt;strong&gt;#72&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;Function to save the binary response.&lt;/li&gt;&lt;/ul&gt;&lt;h5&gt;Week 13&lt;/h5&gt;&lt;p&gt;Everything is done, now I implemented the createMovie function for the users to automate the &lt;a href="https://github.com/Helioviewer-Project/python-api/issues/63"&gt;lengthy process&lt;/a&gt; of creating a movie.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api/pull/73"&gt;&lt;strong&gt;#73&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;/strong&gt;The&lt;strong&gt; &lt;/strong&gt;createMovie function.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;After PR #73 got merged, we had the first release on &lt;a href="https://pypi.org/project/hvpy/"&gt;PyPI&lt;/a&gt;. 🎉&lt;/p&gt;
&lt;p&gt;Now, you can install it and make a movie yourself 😉&lt;/p&gt;
&lt;blockquote&gt;~ pip install hvpy&lt;/blockquote&gt;&lt;p&gt;I hope this project will help researchers within the field of solar physics and helioviewer.org users to carry out their tasks easily and effectively.&lt;/p&gt;
&lt;h5&gt;Reference to the previous blog posts and other resources&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Blog post 1,&lt;strong&gt; &lt;/strong&gt;&lt;a href="https://medium.com/@akash5100/starting-my-summer-with-sunpy-76728e3e0b66"&gt;&lt;strong&gt;Starting my summer with SunP&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;y — &lt;/strong&gt;&lt;br&gt;How I got selected in GSoC and my work experience of week 1 and week 2.&lt;/li&gt;&lt;li&gt;Blog post 2, &lt;a href="https://medium.com/@akash5100/gsoc-2022-project-helioviewer-facade-for-the-api-wrapper-69689b163879"&gt;&lt;strong&gt;Facade for the API wrapper&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;br&gt;&lt;/strong&gt;Detailed work experience from week 3 to week 6.&lt;/li&gt;&lt;li&gt;Blog post 3,&lt;strong&gt; &lt;/strong&gt;&lt;a href="https://medium.com/@akash5100/gsoc-2022-project-helioviewer-moving-close-to-the-first-release-c43249d042d9"&gt;&lt;strong&gt;Moving close to the First Release&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; — &lt;br&gt;&lt;/strong&gt;Detailed work experience from week 7 to week 9.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/Helioviewer-Project/python-api"&gt;Contribute to hvpy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://hvpy.readthedocs.io/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Closing Thoughts&lt;/h4&gt;&lt;p&gt;First of all, I would like to thank with all my heart &lt;a href="https://github.com/nabobalis"&gt;&lt;strong&gt;Nabil Freij&lt;/strong&gt;&lt;/a&gt;, &lt;a href="https://github.com/dgarciabriseno"&gt;&lt;strong&gt;Daniel Garcia Briseno&lt;/strong&gt;&lt;/a&gt;, and &lt;a href="https://github.com/wafels"&gt;&lt;strong&gt;Jack Ireland&lt;/strong&gt;&lt;/a&gt; for their amazing guidance throughout the program. Without their guidance and ideas, I would have not been able to implement this project.&lt;/p&gt;
&lt;p&gt;These three months of work with Project-Helioviewer have made me a very confident backend developer. I learned a lot of new things about programming and learned about my mistakes. I learned how we design a project and execute the project plan.&lt;/p&gt;
&lt;p&gt;I enjoyed every moment of this program.&lt;/p&gt;
&lt;p&gt;Thank you SunPy and The Helioviewer Project ❤&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=f51ba6566f71" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2022/09/20220908_0520_akash5100/</guid><pubDate>Thu, 08 Sep 2022 04:20:16 GMT</pubDate></item><item><title>GSoC 2022: Project Helioviewer — Moving close to the First Release</title><link>http://openastronomy.org/Universe_OA/posts/2022/08/20220810_0551_akash5100/</link><dc:creator>Akash</dc:creator><description>&lt;h4&gt;GSoC 2022: Project Helioviewer — Moving close to the First Release&lt;/h4&gt;&lt;h4&gt;Week 7&lt;/h4&gt;&lt;p&gt;The solution to switch the base URL of the python API wrapper got merged with PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/41"&gt;#41&lt;/a&gt; and follow-up with PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/44"&gt;#44&lt;/a&gt; by Nabil, now the next endpoint group was the movies.&lt;/p&gt;
&lt;p&gt;I rebased my old PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/38"&gt;#38&lt;/a&gt; with the main branch, which brings the &lt;strong&gt;QueueMovie&lt;/strong&gt; endpoint, and opened &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/51"&gt;#51&lt;/a&gt; which brings &lt;strong&gt;reQueueMovie&lt;/strong&gt; and &lt;strong&gt;getMovieStatus &lt;/strong&gt;endpoint to facade and backend.&lt;/p&gt;
&lt;p&gt;By the end of the week, both the PR is merged and we now focus on the documentation before the first release.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;h4&gt;Week 8&lt;/h4&gt;&lt;p&gt;I started working on creating new &lt;strong&gt;RST&lt;/strong&gt; files (reStructuredText is a file format for textual data used primarily in the Python programming language community for technical documentation), writing developer's and installation documentation.&lt;/p&gt;
&lt;p&gt;With PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/48"&gt;#48&lt;/a&gt;, the documentation for the first release is ready.&lt;/p&gt;
&lt;p&gt;See the documentation here: &lt;a href="https://hvpy.readthedocs.io/en/latest/"&gt;https://hvpy.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Week 9&lt;/h4&gt;&lt;p&gt;The current &lt;strong&gt;hvpy&lt;/strong&gt; unittest tests the endpoint functions with the default API URL. But we also want to test the endpoint functions with the beta URL. Basically testing version 3 of the API before release.&lt;/p&gt;
&lt;p&gt;To achieve what we decided, we create an environment variable in the tox file, which triggers the function to &lt;em&gt;switch the base URL, &lt;/em&gt;and now all the test in tox runs in the beta URL.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/55"&gt;#55&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=c43249d042d9" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2022/08/20220810_0551_akash5100/</guid><pubDate>Wed, 10 Aug 2022 04:51:50 GMT</pubDate></item><item><title>GSoC 2022: Project Helioviewer — Facade for the API wrapper</title><link>http://openastronomy.org/Universe_OA/posts/2022/07/20220718_0537_akash5100/</link><dc:creator>Akash</dc:creator><description>&lt;h4&gt;GSoC 2022: Project Helioviewer — Facade for the API wrapper&lt;/h4&gt;&lt;h4&gt;Week 3&lt;/h4&gt;&lt;p&gt;The Generic Function got merged with PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/21"&gt;#21&lt;/a&gt;. This PR adds a function that accepts a URL Endpoint, Input Parameters (dictionary), and a descriptor of Output Parameters (what the endpoint is expected to return), which all the endpoint classes will inherit.&lt;/p&gt;
&lt;p&gt;This PR also includes the unittest for the Generic function and brings the first endpoint to the API wrapper, which is &lt;a href="https://hvpy.readthedocs.io/en/latest/api/hvpy.parameters.getJP2ImageInputParameters.html#getjp2imageinputparameters"&gt;&lt;strong&gt;getJP2Image&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;. &lt;/strong&gt;This endpoint retrieves a JP2000 image from the &lt;a href="http://helioviewer.org"&gt;helioviewer.org&lt;/a&gt; API.&lt;/p&gt;
&lt;h4&gt;Week 4&lt;/h4&gt;&lt;p&gt;The next task was to create a frontend for the &lt;strong&gt;getJP2Image &lt;/strong&gt;endpoint. The actual front end that users will interface with lives in a file called &lt;strong&gt;facade&lt;/strong&gt; which will hide this internal design. This module contains the API interface in its simplest form. It is responsible for taking user input, constructing the &lt;strong&gt;HvpyParameters &lt;/strong&gt;instance (the base class) and passing it to the &lt;strong&gt;core&lt;/strong&gt; to perform the request.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;View the code in:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/33"&gt;#33&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Week 5&lt;/h4&gt;&lt;p&gt;Finally, after the merging of the frontend function, we bring more JPEG2000 endpoints.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/34"&gt;#34&lt;/a&gt; — Adds the endpoint to the backend.&lt;/li&gt;&lt;li&gt;PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/36"&gt;#36&lt;/a&gt; — Adds the frontend function.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Week 6&lt;/h4&gt;&lt;p&gt;Still, a problem left to solve. There are several mirrors for Helioviewer and people might want to use a mirror instead of the main URL. So we will need to add a way to change this.&lt;/p&gt;
&lt;p&gt;PR &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/41"&gt;#41&lt;/a&gt; closes this issue but it’s still under work. Hopefully, by the end of the week, it gets merged :)&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=69689b163879" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2022/07/20220718_0537_akash5100/</guid><pubDate>Mon, 18 Jul 2022 04:37:22 GMT</pubDate></item><item><title>Starting my summer with SunPy</title><link>http://openastronomy.org/Universe_OA/posts/2022/06/20220628_0946_akash5100/</link><dc:creator>Akash</dc:creator><description>&lt;h4&gt;GSoC 2022: Project Helioviewer — Starting my summer with SunPy&lt;/h4&gt;&lt;p&gt;Hey folks, this is my first blog about my work at Google Summer of Code 2022 (actually my first blog in general…)&lt;/p&gt;
&lt;p&gt;I will try to sum up how I got selected for the program (GSoC) and what I did in the first two weeks.&lt;/p&gt;
&lt;p&gt;I started contributing to open-source projects in September 2021, when I heard about the Google Summer of Code program from my friends, I had an eye for GSoC 2022.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Through the timeline, I knew that on the 7th of March Google will release the list of accepted organizations participating as mentors in 2022, I continued building my developer skills.&lt;/p&gt;
&lt;p&gt;On March 7th, I searched for organizations that matched my interest, i.e, science.&lt;/p&gt;
&lt;p&gt;When I saw &lt;a href="https://summerofcode.withgoogle.com/programs/2022/organizations/openastronomy"&gt;&lt;strong&gt;openAstronomy&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;at that moment I was like: &lt;em&gt;what the heck&lt;/em&gt;? &lt;em&gt;astronomy and open source together? huehuehue&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I focused only on one project and while I prepared the proposal, I also made the following contributions:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;In PR &lt;a href="https://github.com/sunpy/sunpy/pull/5980"&gt;#&lt;strong&gt;5980&lt;/strong&gt;&lt;/a&gt; (code) and &lt;a href="https://github.com/sunpy/sunpy/pull/6024"&gt;#&lt;strong&gt;6024&lt;/strong&gt;&lt;/a&gt; (updating docs), I wrote a test case for &lt;a href="https://docs.sunpy.org/en/stable/code_ref/timeseries.html"&gt;&lt;strong&gt;sunpy.timeseries&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;PR &lt;a href="https://github.com/sunpy/sunpy/pull/5961"&gt;#&lt;strong&gt;5961&lt;/strong&gt;&lt;/a&gt; adds an example to show “how to reproject a map to a map projection with a custom origin”.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In the one month before the results, to learn more about software testing and get familiar with &lt;a href="https://docs.pytest.org/en/7.1.x/"&gt;&lt;strong&gt;pytest&lt;/strong&gt;&lt;/a&gt;,&lt;strong&gt; &lt;/strong&gt;I searched for issues labeled “Tests” in sunpy and &lt;a href="https://github.com/sunpy/sunpy/pull/6110"&gt;submitted this pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On 22nd March, I received an email from Google which says:&lt;/p&gt;
&lt;blockquote&gt;Welcome to Google Summer of Code 2022!&lt;/blockquote&gt;&lt;p&gt;It was the most significant moment for me, for my family &amp;amp; friends as well! This marked the start of the Community Bonding Period. &lt;a href="https://summerofcode.withgoogle.com/programs/2022/projects/HXCZO14B"&gt;More details about my project.&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;The Community Bonding Period&lt;/h4&gt;&lt;p&gt;After getting selected for the program, I continued my contribution to sunpy. I worked on a python script that updates vendor code automatically in this &lt;a href="https://github.com/sunpy/sunpy/pull/6127"&gt;pull request&lt;/a&gt;. I meet my mentor Nabil Freij, Jack Ireland and Daniel Garcia Briseno. In a meeting, I was introduced to my mentors and discussed a plan.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;The First and the Second Week&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;The coding period started, and I worked on &lt;a href="https://github.com/Helioviewer-Project/python-api/pull/21"&gt;designing the generic function&lt;/a&gt; for the API wrapper. This PR is ready to merge and thanks to my amazing mentors, I have a clear idea of what I will do in the next two weeks. This is just the beginning, I will continue to post my GSoC work experience here.&lt;/p&gt;
&lt;p&gt;THIS IS EXHILARATING!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=76728e3e0b66" width="1"&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2022/06/20220628_0946_akash5100/</guid><pubDate>Tue, 28 Jun 2022 08:46:06 GMT</pubDate></item></channel></rss>